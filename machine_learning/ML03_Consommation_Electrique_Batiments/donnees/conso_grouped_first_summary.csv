,valid_score_mean,valid_score_std,valid_time_mean,train_score_mean,train_score_std,train_time_mean,data_transfo_time,data_imputers,data_encoders,add_cross,keep_all,restrict_scaler,params_reg,iteration,Imputer,Strategy,Encoder,pca,model,corrected_transfo_time,corrected_valid_time
0,0.7579559341075057,0.012551220737858129,0.06049442291259765,0.8542446690807951,0.002071879900118263,0.3222925662994385,26.045886494000115,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",10,MissForest,,CustomOneHot,None,SVM,0.28575767181169454,0.02899715518951415
1,0.7579559341075057,0.012551220737858129,0.05704011917114257,0.8542446690807951,0.002071879900118263,0.32172431945800783,25.937670882000017,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",21,MissForest,,CustomOneHot,None,SVM,0.17754205981159643,0.025542851448059074
2,0.7579559341075057,0.012551220737858129,0.057806396484375,0.8542446690807951,0.002071879900118263,0.3186731815338135,25.867125022999968,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",22,MissForest,,CustomOneHot,None,SVM,0.10699620081154748,0.026309128761291503
3,0.7579559341075057,0.012551220737858129,0.057294702529907225,0.8542446690807951,0.002071879900118263,0.32207512855529785,25.94790047200013,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",23,MissForest,,CustomOneHot,None,SVM,0.18777164981170813,0.025797434806823727
4,0.7579559341075057,0.012551220737858129,0.05825290679931641,0.8542446690807951,0.002071879900118263,0.3227840900421143,25.830852005999986,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",24,MissForest,,CustomOneHot,None,SVM,0.07072318381156606,0.026755639076232914
5,0.7579559341075057,0.012551220737858129,0.058144855499267574,0.8542446690807951,0.002071879900118263,0.325014591217041,25.833285079999772,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",25,MissForest,,CustomOneHot,None,SVM,0.07315625781135182,0.026647587776184076
6,0.7579559341075057,0.012551220737858129,0.0586583137512207,0.8542446690807951,0.002071879900118263,0.32308855056762703,25.95798724099995,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",26,MissForest,,CustomOneHot,None,SVM,0.19785841881153132,0.027161046028137202
7,0.7579559341075057,0.012551220737858129,0.05749521255493164,0.8542446690807951,0.002071879900118263,0.3189103126525879,25.97915541900011,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",30,MissForest,,CustomOneHot,None,SVM,0.21902659681169112,0.02599794483184814
8,0.7579559341075057,0.012551220737858129,0.05721535682678223,0.8542446690807951,0.002071879900118263,0.32302536964416506,25.938736762000193,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",48,MissForest,,CustomOneHot,None,SVM,0.1786079398117728,0.02571808910369873
9,0.7558109501647834,0.011396552713607077,0.05715146064758301,0.8543602497054803,0.002326451874889413,0.3192058086395264,0.6749504589997741,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",35,KNNImputer,,CustomOneHot,None,SVM,0.11201623792399829,0.02565419292449951
10,0.7558109501647834,0.011396552713607077,0.05825676918029785,0.8543602497054803,0.002326451874889413,0.3320677280426025,0.6845315100003972,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",39,KNNImputer,,CustomOneHot,None,SVM,0.1215972889246214,0.026759501457214355
11,0.7535529971623852,0.012038845701268177,0.03764801025390625,0.8560170446071593,0.002003360858702868,0.26624269485473634,25.920242624000373,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",31,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,0.16011380181195278,0.0061507425308227545
12,0.7535529971623852,0.012038845701268177,0.037475872039794925,0.8560170446071593,0.002003360858702868,0.263494873046875,25.932140917000197,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",33,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,0.1720120948117767,0.005978604316711426
13,0.7535529971623852,0.012038845701268177,0.036947441101074216,0.8560170446071593,0.002003360858702868,0.26071715354919434,26.03759225399972,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",50,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,0.27746343181129873,0.005450173377990718
14,0.7460370721703644,0.013234135177409685,0.05702543258666992,0.8492517331462658,0.0020355439480242024,0.31790409088134763,0.9287330709998968,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",14,IterativeImputer,,CustomOneHot,None,SVM,0.08385715979677488,0.025528164863586424
15,0.7460370721703644,0.013234135177409685,0.05688195228576661,0.8492517331462658,0.0020355439480242024,0.319549560546875,0.9377148349999516,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",40,IterativeImputer,,CustomOneHot,None,SVM,0.09283892379682968,0.025384684562683113
16,0.7442795693062969,0.014332458224914909,0.03765606880187988,0.8509363510426008,0.0020832933276222747,0.2664403915405273,0.5863331810001,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",2,SimpleImputer,'mean',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,-0.054641005337923376,0.0061588010787963846
17,0.7412084764456337,0.015822387848860954,0.021951723098754882,0.8209303478854675,0.0052051462812440176,0.1964134693145752,25.84879118500021,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",27,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,0.08866236281178885,-0.009545544624328616
18,0.7412084764456337,0.015822387848860954,0.021982145309448243,0.8209303478854675,0.0052051462812440176,0.198045825958252,25.972808481999888,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",36,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,0.2126796598114673,-0.009515122413635255
19,0.7343048088148312,0.014351132905108168,0.020558452606201167,0.8069278535116091,0.004876232768691085,0.17669548988342285,25.56612387599989,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",18,MissForest,,LeaveOneOut,None,SVM,-0.1940049461885316,-0.010938815116882331
20,0.7319649665148343,0.020273497218375715,0.02230405807495117,0.8180901615844887,0.0042611362868436855,0.20268115997314454,0.5624514129999625,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",29,SimpleImputer,'median',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,0.2012770810000109,-0.00919320964813233
21,0.7319649665148343,0.020273497218375715,0.02224588394165039,0.8180901615844887,0.0042611362868436855,0.2003746032714844,0.5696108030001596,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",34,SimpleImputer,'median',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,0.20843647100020807,-0.009251383781433108
22,0.7305426839910395,0.023948954186122192,0.02205591201782226,0.8159199745779386,0.0045482868953602975,0.19884200096130367,0.5585527289999845,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",42,SimpleImputer,'mean',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,-0.08242145733803885,-0.009441355705261237
23,0.729683458637296,0.017010716944770334,0.019057464599609376,0.7987635630874884,0.006580839544002132,0.16954488754272462,0.35836641900004906,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",3,KNNImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,-0.20456780207572678,-0.012439803123474123
24,0.7291852227784728,0.0111185900760838,0.018976163864135743,0.8012453494846147,0.004382736084606036,0.17177801132202147,0.21948988100029965,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",17,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,-0.14168445099965193,-0.012521103858947755
25,0.7219859465342449,0.015934317297528755,0.017435789108276367,0.7835046434909877,0.004037677713595386,0.16349287033081056,0.22620869399997898,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",5,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,-0.1349656379999726,-0.014061478614807131
26,0.7096305837139979,0.01527791248774165,0.026091623306274413,0.7840544076151161,0.0028424471233906854,0.20046596527099608,1.8904472579997675,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",20,KNNImputer,,Hashing,None,SVM,1.3275130369239916,-0.005405644416809085
27,0.7057640494146832,0.013570220463869456,0.026409101486206052,0.7834696690888449,0.0040197485624499435,0.2017837047576904,1.7815362420001293,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",12,SimpleImputer,'mean',Hashing,None,SVM,1.140562055662106,-0.005088166236877446
28,0.7057640494146832,0.013570220463869456,0.02590465545654297,0.7834696690888449,0.0040197485624499435,0.19690179824829104,1.880122133999976,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",15,SimpleImputer,'mean',Hashing,None,SVM,1.2391479476619527,-0.0055926122665405295
29,0.7027888206672163,0.011252931942991543,0.021048021316528318,0.7920708086836008,0.003429102105884286,0.18778796195983888,1.9015190229997645,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",37,SimpleImputer,'median',Hashing,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,1.5403446909998129,-0.01044924640655518
30,0.7027888206672163,0.011252931942991543,0.021210527420043944,0.7920708086836008,0.003429102105884286,0.1832425117492676,1.7844666370001503,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",45,SimpleImputer,'median',Hashing,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,1.4232923050001987,-0.010286740303039554
31,0.6927895580424069,0.017740326176603385,0.021362113952636718,0.7902371241449335,0.002775503492867939,0.1875864028930664,2.2980576139998448,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",11,IterativeImputer,,Hashing,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,1.4531817027967229,-0.01013515377044678
32,0.6590631613104595,0.017548640318828766,0.02025003433227539,0.7350436094614972,0.005915465046573972,0.17392539978027344,25.592083592000108,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",16,MissForest,,CustomTarget,None,SVM,-0.1680452301883122,-0.011247233390808107
33,0.6572353087784691,0.03038438594033888,0.019927978515625,0.6770917566742843,0.00882672648549613,0.15751137733459472,25.413453749999924,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",28,MissForest,,Ordinal,None,SVM,-0.34667507218849636,-0.011569289207458498
34,0.6572353087784691,0.03038438594033888,0.02006139755249024,0.6770917566742843,0.00882672648549613,0.16041135787963867,25.630239602000074,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",38,MissForest,,Ordinal,None,SVM,-0.12988922018834614,-0.011435870170593259
35,0.6572353087784691,0.03038438594033888,0.022345638275146483,0.6770917566742843,0.00882672648549613,0.15910048484802247,25.52218389100017,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",43,MissForest,,Ordinal,None,SVM,-0.2379449311882489,-0.009151629447937015
36,0.6542647155211718,0.033415715760791574,0.022212648391723638,0.6740293229271535,0.0099803170898409,0.16054925918579102,0.2730153040001824,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",32,KNNImputer,,Ordinal,None,SVM,-0.2899189170755934,-0.00928461933135986
37,0.6509859999586733,0.014514769713409563,0.01984400749206543,0.7300483253975949,0.005900687299381197,0.17421917915344234,0.22505914100020166,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",19,SimpleImputer,'mean',CustomTarget,None,SVM,-0.41591504533782175,-0.011653260231018068
38,0.6497404976529538,0.03726898994687648,0.019894218444824214,0.6718328688900282,0.01106001137745791,0.15833373069763185,0.14954275299987785,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",46,SimpleImputer,'mean',Ordinal,None,SVM,-0.49143143333814554,-0.011603049278259284
39,0.6489600052802947,0.020421473962139083,0.017351722717285155,0.7099374806277549,0.007051322304117136,0.15930547714233398,0.34318727799973203,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,False,,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",6,KNNImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,-0.2197469430760438,-0.014145545005798343
40,0.6470491074665071,0.030383892561973918,0.017547178268432616,0.7112111437850503,0.008354249453232175,0.16022038459777832,25.59788572399975,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",41,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,-0.16224309818867155,-0.013950089454650882
41,0.6459092251652894,0.027935398865201955,0.018289804458618164,0.7133728142996487,0.00771817131211537,0.16195883750915527,0.224851906999902,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",7,SimpleImputer,'mean',LeaveOneOut,None,SVM,-0.4161222793381214,-0.013207463264465334
42,0.6416562362328596,0.034716766584120644,0.019960784912109376,0.6632677629844455,0.010342234075682324,0.15462636947631836,0.5149960580001789,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",4,IterativeImputer,,Ordinal,None,SVM,-0.329879853202943,-0.011536482810974122
43,0.6410001561325955,0.02173963322471232,0.017459630966186523,0.7049561399045927,0.006933612598497435,0.16479249000549318,0.22513807399991487,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",1,SimpleImputer,'mean',CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,-0.4158361123381085,-0.014037636756896975
44,0.6380223920096204,0.02667636598293692,0.018335866928100585,0.7044549423265892,0.007601234903518825,0.16241517066955566,0.6000098199997409,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",44,IterativeImputer,,LeaveOneOut,None,SVM,-0.244866091203381,-0.013161400794982913
45,0.6380223920096204,0.02667636598293692,0.018200302124023442,0.7044549423265892,0.007601234903518825,0.16322941780090333,0.6034397040002659,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",49,IterativeImputer,,LeaveOneOut,None,SVM,-0.24143620720285597,-0.013296965599060056
46,0.6354783787352053,0.016966457826633998,0.022272062301635743,0.7218484016233166,0.005783794178521223,0.1728062629699707,0.5835906880001858,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",9,IterativeImputer,,CustomTarget,None,SVM,-0.2612852232029361,-0.009225205421447755
47,0.6343131557604934,0.020293014654362743,0.01685223579406738,0.693460412377177,0.006704469426095306,0.15831570625305175,0.36594729399985226,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,False,,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",47,KNNImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,-0.19698692707592358,-0.014645031929016117
48,0.6253141444509274,0.027898109113737784,0.0170133113861084,0.662056169130998,0.018390781369117315,0.15052881240844726,0.15064967699981935,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",8,SimpleImputer,'mean',Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,-0.49032450933820404,-0.0144839563369751
49,0.6191499199164084,0.02084790185259167,0.017005634307861332,0.6797047391302672,0.007585063140553339,0.15523033142089845,0.6072490530000323,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,False,,"{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",13,IterativeImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",SVM,-0.2376268582030896,-0.014491633415222166
50,0.7531858392148785,0.027367727007376,0.10330328941345217,0.9999999999949478,1.503291896831579e-12,0.7000083446502685,25.603484558999753,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",18,MissForest,,LeaveOneOut,None,Extra Trees,-0.1566442631886673,-0.001263094902038575
51,0.7531858392148785,0.027367727007376,0.10359139442443847,0.9999999999949478,1.503291896831579e-12,0.7100383281707764,25.476294987000074,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",24,MissForest,,LeaveOneOut,None,Extra Trees,-0.2838338351883465,-0.0009749898910522692
52,0.7531858392148785,0.02736772700737601,0.1036020278930664,0.9999999999949478,1.503291896831579e-12,0.7065373420715332,25.593827436000534,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",25,MissForest,,LeaveOneOut,None,Extra Trees,-0.16630138618788592,-0.000964356422424345
53,0.7531858392148785,0.027367727007376,0.10342020988464357,0.9999999999949478,1.503291896831579e-12,0.7060939788818359,25.592447476000412,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",26,MissForest,,LeaveOneOut,None,Extra Trees,-0.167681346188008,-0.0011461744308471772
54,0.7531858392148785,0.027367727007375997,0.10353798866271972,0.9999999999949478,1.503291896831579e-12,0.7113656997680664,25.623373698999785,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",28,MissForest,,LeaveOneOut,None,Extra Trees,-0.13675512318863525,-0.0010283956527710192
55,0.7497281556002727,0.03001221213004085,0.10342097282409668,0.9999999999943484,4.741515298499944e-13,0.7043731689453125,0.33561352099968644,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",32,KNNImputer,,LeaveOneOut,None,Extra Trees,-0.2273207000760894,-0.0011454114913940633
56,0.7497281556002727,0.03001221213004088,0.10348787307739256,0.9999999999943484,4.741515298499944e-13,0.7036611080169678,0.33013555700017605,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",39,KNNImputer,,LeaveOneOut,None,Extra Trees,-0.2327986640755998,-0.0010785112380981843
57,0.7497281556002726,0.030012212130040863,0.10350003242492677,0.9999999999943484,4.741515298499944e-13,0.7136797904968262,0.3308086379993256,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",35,KNNImputer,,LeaveOneOut,None,Extra Trees,-0.23212558307645026,-0.0010663518905639768
58,0.7495364106548372,0.02873532661377207,0.10344462394714356,0.9999999999939126,2.285075902512451e-12,0.7061604022979736,0.2297471420006332,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",46,SimpleImputer,'mean',LeaveOneOut,None,Extra Trees,-0.4112270443373902,-0.0011217603683471855
59,0.7439351611186563,0.029999814353235732,0.10545816421508787,0.9999999999956252,3.530114787799865e-13,0.8040157794952393,0.6152406149994931,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",49,IterativeImputer,,LeaveOneOut,None,Extra Trees,-0.22963529620362877,0.0008917798995971282
60,0.7432357066664933,0.02544814618523061,0.1035780429840088,0.9999999999949464,2.2252380565773654e-12,0.7015164375305176,0.5920735549998426,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",40,IterativeImputer,,LeaveOneOut,None,Extra Trees,-0.2528023562032793,-0.0009883413314819428
61,0.7432357066664932,0.02544814618523064,0.10338006019592286,0.9999999999949464,2.2252380565773654e-12,0.7040489673614502,0.5981811459996607,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",44,IterativeImputer,,LeaveOneOut,None,Extra Trees,-0.24669476520346123,-0.0011863241195678859
62,0.7399392752210089,0.02716830853326632,0.10416111946105958,0.9999999999950192,9.140309976716068e-13,1.492901611328125,25.928257156000647,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",22,MissForest,,CustomOneHot,None,Extra Trees,0.16812833381222703,-0.0004052648544311671
63,0.7399392752210088,0.02716830853326627,0.10647969245910643,0.9999999999950192,9.140309976716068e-13,1.4546846389770507,25.965531381000343,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",10,MissForest,,CustomOneHot,None,Extra Trees,0.20540255881192238,0.0019133081436156912
64,0.7399392752210088,0.027168308533266284,0.10876860618591308,0.9999999999950192,9.140309976716068e-13,1.4565202236175536,25.83259085300051,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",21,MissForest,,CustomOneHot,None,Extra Trees,0.07246203081209046,0.004202221870422337
65,0.7399392752210088,0.02716830853326627,0.11042981147766114,0.9999999999950192,9.140309976716068e-13,1.4684126853942872,25.95461388900003,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",23,MissForest,,CustomOneHot,None,Extra Trees,0.19448506681160893,0.005863427162170393
66,0.7317059230555502,0.027069225834395392,0.1098052978515625,0.9999999999946424,1.030314967301281e-12,1.451886796951294,0.9461539469998571,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",14,IterativeImputer,,CustomOneHot,None,Extra Trees,0.10127803579673522,0.005238913536071754
67,0.7263922357020146,0.032207193602334434,0.10549530982971192,0.9999999999962634,1.4995115275043893e-12,0.7472805500030517,25.58952322700043,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",31,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.17060559518798968,0.0009289255142211766
68,0.7263922357020146,0.03220719360233434,0.10432381629943847,0.9999999999962634,1.4995115275043893e-12,0.7232837677001953,25.572486693999963,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",33,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.1876421281884575,-0.00024256801605226919
69,0.7251363855843685,0.027195639369266063,0.105955171585083,0.9999999999964866,7.695961053714163e-13,0.7289254188537597,0.2302467290001005,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",17,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.1309276029998511,0.0013887872695922537
70,0.7251363855843684,0.027195639369266042,0.10530562400817872,0.9999999999964866,7.695961053714163e-13,0.7744591712951661,0.22407830900010595,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",37,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.13709602299984563,0.0007392396926879791
71,0.7249317074934355,0.015498273968303259,0.11057581901550292,0.9999999999919004,3.970509123404536e-12,1.9258859157562256,0.5616046499999356,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",2,SimpleImputer,'mean',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.07936953633808774,0.006009434700012181
72,0.7247692645179524,0.03446764498352596,0.10569558143615723,0.9999999999945997,3.5157150958395565e-12,0.7278038978576659,0.35532237699999314,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",3,KNNImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.2076118440757827,0.0011291971206664891
73,0.7204188884788629,0.03608649298600139,0.10375714302062987,0.9999999999955936,1.3963092155079707e-12,0.6045524597167968,25.597826981999788,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",27,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.1623018401886327,-0.000809241294860874
74,0.7204188884788629,0.03608649298600143,0.10339236259460448,0.9999999999955936,1.3963092155079707e-12,0.6076920032501221,25.585604189999685,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",29,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.17452463218873504,-0.0011740217208862647
75,0.7204188884788629,0.03608649298600143,0.1037787914276123,0.9999999999955936,1.3963092155079707e-12,0.6250230312347412,25.57082149300004,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",36,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.1893073291883809,-0.0007875928878784411
76,0.7189950833922382,0.029910798077575962,0.10521297454833983,0.9999999999944044,3.5436102291398215e-12,0.7304338932037353,0.2562023299997236,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",45,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.10497200200022799,0.0006465902328490897
77,0.7178648593661647,0.032693100129140895,0.10397129058837892,0.9999999999942272,2.2023303676399426e-12,0.6049389839172363,0.21950867399982602,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",5,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.14166565800012557,-0.0005950937271118201
78,0.6966926673843362,0.028486718274197,0.1034409523010254,0.9999999999936632,2.3933222888760225e-12,0.8841685771942138,1.95284689600021,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",12,SimpleImputer,'mean',Hashing,None,Extra Trees,1.3118727096621867,-0.0011254320144653412
79,0.6966926673843362,0.028486718274196982,0.10343542098999024,0.9999999999936632,2.3933222888760225e-12,0.8858793258666993,1.7836820659999832,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",15,SimpleImputer,'mean',Hashing,None,Extra Trees,1.1427078796619599,-0.0011309633255005003
80,0.6959180323134712,0.022561324599083755,0.10370078086853028,0.9999999999928528,2.511359044640829e-12,0.9104337692260742,2.006926139999905,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",20,KNNImputer,,Hashing,None,Extra Trees,1.4439919189241293,-0.0008656034469604612
81,0.6922125081877072,0.03153907924938058,0.1035526752471924,0.9999999999957256,1.667053804593463e-12,0.7039670944213867,0.5059063949997835,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",4,IterativeImputer,,Ordinal,None,Extra Trees,-0.3389695162033384,-0.0010137090682983407
82,0.6839302129100784,0.02939778443558063,0.10490894317626953,0.9999999999966722,5.898311653323344e-13,0.7036728858947754,25.712731562000045,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",48,MissForest,,CustomTarget,None,Extra Trees,-0.04739726018837587,0.0003425588607787883
83,0.6839302129100783,0.0293977844355806,0.10332131385803224,0.9999999999966722,5.898311653323344e-13,0.7036908149719239,25.59030779600016,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",16,MissForest,,CustomTarget,None,Extra Trees,-0.16982102618825934,-0.0012450704574585025
84,0.6839302129100783,0.0293977844355806,0.10339207649230957,0.9999999999966722,5.898311653323344e-13,0.7040759086608886,25.479535964999737,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",43,MissForest,,CustomTarget,None,Extra Trees,-0.2805928571886831,-0.0011743078231811754
85,0.6830965427318628,0.029175238963179213,0.10471663475036623,0.9999999999960608,1.1046003262505803e-12,0.5664673805236816,0.14678765399958138,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",8,SimpleImputer,'mean',Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.494186532338442,0.0001502504348754874
86,0.6769401352019828,0.02376422446569109,0.10366950035095217,0.9999999999951996,1.5741693424930772e-12,0.5474146366119385,25.525857556000123,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",50,MissForest,,Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.23427126618829774,-0.0008968839645385751
87,0.6766154970876757,0.02439946927140921,0.10584487915039062,0.9999999999922166,4.291561719595073e-12,0.9144465446472168,2.136944201999995,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",11,IterativeImputer,,Hashing,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,1.2920682907968732,0.0012784948348998765
88,0.6754641567639803,0.03137780049595622,0.10331993103027344,0.9999999999969054,3.2300891336876914e-13,0.7010458946228028,0.5927899549997164,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",9,IterativeImputer,,CustomTarget,None,Extra Trees,-0.25208595620340546,-0.0012464532852173027
89,0.6744484625106641,0.031331641954548635,0.1045588493347168,0.9999999999969134,1.0787134586439057e-12,0.7034764289855957,0.221914833000028,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",19,SimpleImputer,'mean',CustomTarget,None,Extra Trees,-0.4190593533379954,-7.534980773937772e-06
90,0.6521334604208734,0.03457197672677414,0.10304827690124513,0.999999999996328,1.5552713758313013e-12,0.6029337882995606,25.72032768400004,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",38,MissForest,,LeaveOneOut,None,Extra Trees,-0.03980113818838049,-0.0015181074142456147
91,0.6476777186612095,0.036807533857452536,0.1036879539489746,0.999999999996593,1.5832293929434799e-12,0.602895450592041,0.228696294999736,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",7,SimpleImputer,'mean',LeaveOneOut,None,Extra Trees,-0.4122778913382874,-0.0008784303665161364
92,0.642882018838517,0.03925247002713792,0.10318942070007324,0.9999999999958866,1.7287242353071288e-12,0.603761625289917,0.2438400360006199,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",30,SimpleImputer,'median',LeaveOneOut,None,Extra Trees,-0.11733429599933168,-0.0013769636154175036
93,0.6372200373102906,0.024189108563494297,0.1032771587371826,0.9999999999985664,4.271673541690461e-13,0.7048861503601074,25.49741979999999,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",41,MissForest,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.2627090221884316,-0.0012892255783081424
94,0.6281392615867247,0.02629628119116974,0.10332159996032717,0.9999999999989152,3.681206346695861e-13,0.6096446037292479,0.3500772639999923,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,False,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",6,KNNImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.21285695707578356,-0.0012447843551635779
95,0.6128814732139631,0.027962165629164582,0.1034736156463623,0.9999999999983644,2.9168277445356927e-13,0.606918478012085,0.2189254869999786,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",1,SimpleImputer,'mean',CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.4220486993380448,-0.001092768669128441
96,0.6081569367657914,0.029253607248736557,0.1065016746520996,0.9999999999931428,3.7139564785075564e-12,0.5432364940643309,0.2260733989996879,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",34,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.13510093300026368,0.001935290336608858
97,0.6025916103959996,0.03656800605297216,0.10423951148986817,0.9999999999973388,2.0761559045859034e-12,0.5902364730834961,0.2253927060000933,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",42,SimpleImputer,'mean',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.4155814803379301,-0.00032687282562257614
98,0.5921507927018814,0.03449667546110399,0.10554389953613283,0.999999999998202,6.767224831725684e-13,0.5440266609191895,0.6276525009998295,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,False,,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",13,IterativeImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.2172234102032924,0.0009775152206420862
99,0.4865561616577382,0.043041888080601366,0.10334105491638183,0.999999999998622,8.512419317938642e-13,0.4246336936950684,0.26690894500006834,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",47,KNNImputer,,Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Extra Trees,-0.2960252760757075,-0.0012253293991089098
100,0.7500358086765944,0.03507946004979458,0.003352975845336914,0.8524001111921468,0.004059914674672439,0.17040510177612306,0.34829127000011795,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",32,KNNImputer,,LeaveOneOut,None,XGBoost,-0.2146429510756579,-0.00045496463775634814
101,0.7500358086765944,0.03507946004979458,0.0033019065856933595,0.8524001111921468,0.004059914674672439,0.17117953300476074,0.33692599200003315,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",35,KNNImputer,,LeaveOneOut,None,XGBoost,-0.2260082290757427,-0.0005060338973999026
102,0.7500358086765944,0.03507946004979458,0.0036951541900634775,0.8524001111921468,0.004059914674672439,0.1684182643890381,0.33529813699988154,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",39,KNNImputer,,LeaveOneOut,None,XGBoost,-0.2276360840758943,-0.0001127862930297846
103,0.7500358086765944,0.03507946004979458,0.0032676219940185546,0.8524001111921468,0.004059914674672439,0.16864848136901855,0.3425573229997099,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",40,KNNImputer,,LeaveOneOut,None,XGBoost,-0.22037689807606592,-0.0005403184890747075
104,0.7500358086765944,0.03507946004979458,0.0033864974975585933,0.8524001111921468,0.004059914674672439,0.17137937545776366,0.3456018110000514,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",44,KNNImputer,,LeaveOneOut,None,XGBoost,-0.21733241007572446,-0.0004214429855346688
105,0.7500358086765944,0.03507946004979458,0.003435993194580078,0.8524001111921468,0.004059914674672439,0.16833882331848146,0.3419469230002505,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",46,KNNImputer,,LeaveOneOut,None,XGBoost,-0.22098729807552536,-0.0003719472885131839
106,0.7484674176658122,0.0374830607206921,0.003321456909179688,0.8526772564101405,0.005793247724229928,0.16899962425231935,25.609621020999843,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",18,MissForest,,LeaveOneOut,None,XGBoost,-0.15050780118857787,-0.000486483573913574
107,0.7484674176658122,0.0374830607206921,0.003682231903076172,0.8526772564101405,0.005793247724229928,0.17243857383728028,25.59335732199997,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",24,MissForest,,LeaveOneOut,None,XGBoost,-0.16677150018844955,-0.00012570858001709033
108,0.7484674176658122,0.0374830607206921,0.0045852184295654295,0.8526772564101405,0.005793247724229928,0.17087044715881347,25.604220793000426,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",25,MissForest,,LeaveOneOut,None,XGBoost,-0.1559080291879944,0.0007772779464721674
109,0.7484674176658122,0.0374830607206921,0.004628276824951172,0.8526772564101405,0.005793247724229928,0.1704411029815674,25.520875562000583,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",26,MissForest,,LeaveOneOut,None,XGBoost,-0.2392532601878372,0.0008203363418579101
110,0.7484674176658122,0.0374830607206921,0.0033250808715820307,0.8526772564101405,0.005793247724229928,0.1708327293395996,25.675229235999726,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",28,MissForest,,LeaveOneOut,None,XGBoost,-0.08489958618869409,-0.0004828596115112314
111,0.7439186930055723,0.025695021925751054,0.005037593841552735,0.8441241242399743,0.003843474389094675,0.4472071170806885,25.87574583700007,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",10,MissForest,,CustomOneHot,None,XGBoost,0.11561701481165088,0.0012296533584594733
112,0.7439186930055723,0.025695021925751054,0.00558309555053711,0.8441241242399743,0.003843474389094675,0.4441601276397705,25.960740450999765,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",21,MissForest,,CustomOneHot,None,XGBoost,0.20061162881134464,0.0017751550674438483
113,0.7439186930055723,0.025695021925751054,0.004913187026977539,0.8441241242399743,0.003843474389094675,0.43868265151977537,25.965426452999964,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",22,MissForest,,CustomOneHot,None,XGBoost,0.20529763081154329,0.0011052465438842773
114,0.7439186930055723,0.025695021925751054,0.004927539825439453,0.8441241242399743,0.003843474389094675,0.4477829933166504,25.95290262299932,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",23,MissForest,,CustomOneHot,None,XGBoost,0.192773800810901,0.0011195993423461907
115,0.7402658249301911,0.02948018981208561,0.005012130737304689,0.8408516805163284,0.004523988735029804,0.44370675086975103,0.9376513810002508,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",14,IterativeImputer,,CustomOneHot,None,XGBoost,0.09277546979712892,0.0012041902542114266
116,0.7302661055672299,0.034247807038198505,0.00343012809753418,0.8526766041713822,0.007244777221180274,0.2305469512939453,0.3592430520002381,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",3,KNNImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.20369116907553775,-0.000377812385559082
117,0.7287148212544341,0.02915578790089514,0.0032810211181640626,0.8426739236816481,0.0022432306383989267,0.17062945365905766,0.5349648370001887,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",4,IterativeImputer,,Ordinal,None,XGBoost,-0.3099110742029332,-0.0005269193649291995
118,0.7286428713005121,0.035342714237996765,0.003428220748901367,0.8525928952026863,0.006377502080019862,0.22909321784973144,0.3333242000007885,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",33,KNNImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.22961002107498735,-0.00037971973419189493
119,0.7286428713005121,0.035342714237996765,0.003394269943237305,0.8525928952026863,0.006377502080019862,0.23251934051513676,0.3363886269999057,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",37,KNNImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.22654559407587016,-0.0004136705398559569
120,0.7260092910682653,0.03441698030966772,0.003681039810180664,0.8436331620405948,0.008228926767047347,0.1859499454498291,0.3282857150006748,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",36,KNNImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.23464850607510102,-0.00012690067291259814
121,0.7247470080813547,0.03662341939630687,0.0035629749298095705,0.8519251345801075,0.008623009178428053,0.2315967559814453,25.61941455599936,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",31,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.14071426618906102,-0.00024496555328369163
122,0.723882501681308,0.03774072952057368,0.0034943103790283205,0.8422228884654801,0.007106256861507244,0.18635382652282714,25.59035396899981,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",27,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.16977485318860985,-0.00031363010406494163
123,0.723882501681308,0.03774072952057368,0.00346527099609375,0.8422228884654801,0.007106256861507244,0.18633780479431156,25.497893701000066,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",29,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.262235121188354,-0.0003426694869995122
124,0.7216534297265105,0.03136336363080064,0.003771686553955078,0.825779915308669,0.004608906762063913,0.16642861366271972,0.2379904889994577,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",19,SimpleImputer,'mean',CustomTarget,None,XGBoost,-0.40298369733856565,-3.6253929138183906e-05
125,0.7216534297265105,0.03136336363080064,0.00456395149230957,0.825779915308669,0.004608906762063913,0.16820187568664552,0.2244318970006134,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",48,SimpleImputer,'mean',CustomTarget,None,XGBoost,-0.41654228933741,0.0007560110092163078
126,0.7194241664658132,0.0337984188408335,0.003687429428100586,0.8212126013826337,0.004258254297492935,0.21907405853271486,1.9439723770001365,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",12,SimpleImputer,'mean',Hashing,None,XGBoost,1.302998190662113,-0.000120511054992676
127,0.7194241664658132,0.0337984188408335,0.005074024200439453,0.8212126013826337,0.004258254297492935,0.21818413734436035,1.8292766980002853,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",15,SimpleImputer,'mean',Hashing,None,XGBoost,1.1883025116622619,0.001266083717346191
128,0.7192218281404015,0.033763470064105176,0.0037923336029052736,0.8290258909438325,0.004606064580814475,0.17176671028137208,0.3398135059997003,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",43,KNNImputer,,CustomTarget,None,XGBoost,-0.22312071507607556,-1.5606880187988507e-05
129,0.7191842577761918,0.03584396138295933,0.003555965423583984,0.8454389881427928,0.005180142573589172,0.2274096965789795,0.5961857410002267,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",45,IterativeImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.2486901702028952,-0.0002519750595092779
130,0.7165592336731959,0.033038962162578636,0.003294181823730469,0.8284213553828998,0.004171942777079345,0.17244315147399902,25.70927280100023,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",16,MissForest,,CustomTarget,None,XGBoost,-0.0508560211881921,-0.0005137586593627931
131,0.7165540252050523,0.0341204949456536,0.0034648418426513677,0.8348108913222962,0.006139527928289706,0.18439555168151853,0.2207339540000248,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",5,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.14044037799992679,-0.0003430986404418944
132,0.7163720868652931,0.028594923409614868,0.0036581993103027353,0.8240676823761341,0.003222726612028216,0.22018346786499024,2.0286267970004697,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",20,KNNImputer,,Hashing,None,XGBoost,1.465692575924694,-0.0001497411727905268
133,0.7162763943376896,0.03678278743543842,0.004709959030151367,0.8486875284747996,0.004948294034840161,0.2287637710571289,0.22123776199987333,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",17,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.13993657000007825,0.0009020185470581051
134,0.7148393192144848,0.00543508246790574,0.00413355827331543,0.8762811303998708,0.003446582584826652,0.6995489597320557,0.6028138749998107,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",2,SimpleImputer,'mean',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.03816031133821274,0.0003256177902221679
135,0.713461836199377,0.03496327416425549,0.003414392471313477,0.8266124341168408,0.005120232768538291,0.16864967346191406,0.5829200210000636,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",9,IterativeImputer,,CustomTarget,None,XGBoost,-0.2619558902030583,-0.0003935480117797851
136,0.6815268321588432,0.01199626097005238,0.0047051429748535155,0.8432301034358674,0.0066853357346663075,0.28986444473266604,2.2311485310001444,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",11,IterativeImputer,,Hashing,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,1.3862726197970225,0.0008972024917602533
137,0.6744418207355954,0.021898340670235036,0.003438997268676758,0.8149177398631737,0.012070067588167458,0.15941667556762695,0.15670782699999108,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",8,SimpleImputer,'mean',Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.4842663593380323,-0.00036894321441650413
138,0.6655996431295155,0.039895591930468745,0.003681373596191406,0.7861454637458446,0.007130720427023921,0.15030722618103026,0.2314342749996285,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",7,SimpleImputer,'mean',LeaveOneOut,None,XGBoost,-0.4095399113383949,-0.00012656688690185604
139,0.6645725269037317,0.03729754592031323,0.003226089477539063,0.7848935736169939,0.0077043059935369895,0.14857840538024902,0.2375870819996635,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",30,SimpleImputer,'median',LeaveOneOut,None,XGBoost,-0.12358725000028808,-0.000581851005554199
140,0.6622159726288505,0.036646139792856816,0.0031852245330810545,0.7912610238388341,0.006230753116109551,0.15354328155517574,0.3408827250004833,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",38,KNNImputer,,LeaveOneOut,None,XGBoost,-0.22205149607529256,-0.0006227159500122076
141,0.6526505649116598,0.016021386480226864,0.003453350067138672,0.7963965351220852,0.005370375964584557,0.160933256149292,0.2761091520005721,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",50,KNNImputer,,Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.2868250690752037,-0.00035459041595459033
142,0.6443123110053731,0.04515283957663166,0.00353093147277832,0.7817178818137143,0.006117022714257197,0.15274205207824704,0.6015128460003325,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",49,IterativeImputer,,LeaveOneOut,None,XGBoost,-0.24336306520278939,-0.000277009010314942
143,0.6434109065528221,0.02090070784853535,0.003783512115478516,0.8019324786477963,0.006318326783281839,0.2270431041717529,0.3388927949999925,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",41,KNNImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.22404142607578337,-2.442836761474632e-05
144,0.6357819365010942,0.02752800726606476,0.00339350700378418,0.7857018508612563,0.008343448931427733,0.17455334663391114,0.34493996900073404,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,False,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",6,KNNImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.2179942520750418,-0.0004144334793090821
145,0.6339372047872158,0.03066090448268515,0.003323793411254883,0.7785476644980849,0.005001922425465031,0.16049771308898925,0.3481251469993367,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",34,KNNImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.21480907407643912,-0.0004841470718383793
146,0.6331694936862526,0.033127613717289346,0.0034666538238525392,0.7740068969475316,0.005214380320397071,0.1615281105041504,0.23851508899952026,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",42,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.12265924300043132,-0.0003412866592407229
147,0.6269466051454309,0.031221307019350313,0.0036338329315185546,0.7830743413702366,0.007838404703593217,0.2068861961364746,0.2284565330000987,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",1,SimpleImputer,'mean',CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.4125176533379247,-0.00017410755157470752
148,0.6218693485881068,0.028522641949779312,0.003377199172973633,0.7677880642414069,0.004783541017850144,0.15837564468383789,0.5980455799999618,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,False,,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",13,IterativeImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.2468303312031601,-0.0004307413101196293
149,0.3674590336882698,0.03072531529950447,0.003883695602416992,0.5492641585833065,0.008239588506672222,0.10244007110595704,0.15028472099947976,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",47,SimpleImputer,'median',Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",XGBoost,-0.21088961100047182,7.575511932372998e-05
150,0.7491007575900468,0.017156309656041643,0.0024742603302001947,0.7836398867096432,0.005226261701524641,0.02450375556945801,25.851426258999933,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",21,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,0.09129743681151226,0.0004145984649658206
151,0.7491007575900468,0.017156309656041643,0.002619838714599609,0.7836398867096432,0.005226261701524641,0.024150562286376957,25.849915232000054,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",22,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,0.08978640981163366,0.0005601768493652347
152,0.7491007575900468,0.017156309656041643,0.0024630546569824213,0.7836398867096432,0.005226261701524641,0.02460455894470215,25.94762333700009,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",23,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,0.187494514811668,0.00040339279174804715
153,0.7491007575900468,0.017156309656041643,0.002393436431884765,0.7836398867096432,0.005226261701524641,0.025530576705932617,25.95353782100005,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",24,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,0.19340899881163054,0.0003337745666503909
154,0.7491007575900468,0.017156309656041643,0.00225677490234375,0.7836398867096432,0.005226261701524641,0.023218774795532228,25.82794333699985,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",25,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,0.06781451481143108,0.00019711303710937596
155,0.7491007575900468,0.017156309656041643,0.002338123321533203,0.7836398867096432,0.005226261701524641,0.02314772605895996,25.934442579999995,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",26,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,0.174313757811575,0.00027846145629882883
156,0.7491007575900468,0.017156309656041643,0.0024405002593994147,0.7836398867096432,0.005226261701524641,0.02364664077758789,25.858118361999914,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",27,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,0.09798953981149339,0.00038083839416504055
157,0.7491007575900468,0.017156309656041643,0.002434968948364258,0.7836398867096432,0.005226261701524641,0.02451014518737793,26.026077856000033,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",29,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,0.26594903381161217,0.0003753070831298837
158,0.7491007575900468,0.017156309656041643,0.0023081302642822266,0.7836398867096432,0.005226261701524641,0.023493528366088867,25.9517073049999,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",31,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,0.1915784828114795,0.00024846839904785244
159,0.7491007575900468,0.017156309656041643,0.002309846878051758,0.7836398867096432,0.005226261701524641,0.023813581466674803,25.98099663900007,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",33,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,0.22086781681165135,0.00025018501281738386
160,0.7491007575900468,0.017156309656041643,0.002335119247436524,0.7836398867096432,0.005226261701524641,0.024202013015747068,25.94761912200011,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",36,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,0.18749029981168874,0.0002754573822021499
161,0.7491007575900468,0.017156309656041643,0.003000020980834961,0.7836398867096432,0.005226261701524641,0.026502943038940432,25.958441193999988,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",48,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,0.1983123718115678,0.0009403591156005868
162,0.74854860761075,0.014913794513678524,0.001714181900024414,0.7979862120830263,0.004731081977527556,0.008144664764404294,26.11204653300001,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': None}",10,MissForest,,CustomOneHot,None,Ridge,0.3519177108115912,-0.00034547996520996
163,0.74854860761075,0.014913794513678524,0.0016396522521972654,0.7979862120830263,0.004731081977527556,0.007642030715942383,25.835238318000165,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': None}",50,MissForest,,CustomOneHot,None,Ridge,0.07510949581174486,-0.00042000961303710876
164,0.7447134519235942,0.01956217034631583,0.002431821823120117,0.7790307561306422,0.006005557901932925,0.023186349868774412,0.5628859820001253,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",2,SimpleImputer,'mean',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.07808820433789809,0.0003721599578857429
165,0.7447134519235942,0.01956217034631583,0.0023642063140869147,0.7790307561306422,0.006005557901932925,0.02408390045166016,0.5764412949999951,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",42,SimpleImputer,'mean',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.06453289133802831,0.00030454444885254055
166,0.7422694003431711,0.034474721979553924,0.0021003246307373046,0.7503044240262169,0.00908955815411007,0.0052426815032959,25.601122433,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': None}",18,MissForest,,LeaveOneOut,None,Ridge,-0.15900638918841992,4.066276550293048e-05
167,0.7400583338131271,0.014879498990836584,0.0023917675018310545,0.7778247867346523,0.004740289332782084,0.023172760009765626,0.7046072109999386,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",35,KNNImputer,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,0.14167298992416277,0.0003321056365966804
168,0.7400583338131271,0.014879498990836584,0.002300119400024414,0.7778247867346523,0.004740289332782084,0.02447452545166016,0.6773357150000265,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",39,KNNImputer,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,0.1144014939242507,0.00024045753479003985
169,0.7371791533809271,0.0390205727003105,0.0019356727600097657,0.7447944569706771,0.01045521746074557,0.007432174682617187,0.3551133560001745,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",3,KNNImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.20782086507560132,-0.00012398910522460845
170,0.7354149230541227,0.0169561012195875,0.0017960548400878906,0.7893573892981232,0.0062800178033761535,0.006909275054931639,0.9233044250001968,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': None}",14,IterativeImputer,,CustomOneHot,None,Ridge,0.07842851379707494,-0.00026360702514648354
171,0.7298121230968769,0.03426463815694073,0.0018574714660644527,0.7366978508850578,0.009093626399030946,0.006556224822998047,0.22164036599997414,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",17,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.13953396599997744,-0.0002021903991699214
172,0.7291567596763109,0.033984058574573435,0.0021346092224121095,0.7418767414120613,0.0056357744212354325,0.02232885360717773,0.5876944599999661,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",30,SimpleImputer,'median',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,0.22652012800001448,7.494735717773543e-05
173,0.7291567596763109,0.033984058574573435,0.002279281616210937,0.7418767414120613,0.0056357744212354325,0.024892520904541016,0.5745446019998326,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",34,SimpleImputer,'median',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,0.213370269999881,0.00021961975097656294
174,0.7217517442615229,0.032688496529582146,0.0021913528442382814,0.7326905848576973,0.00565884526895547,0.021979331970214844,0.9322187239999948,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",40,IterativeImputer,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,0.08734281279687295,0.0001316909790039073
175,0.7167386576295642,0.03823573293333524,0.0021807670593261717,0.7219176390166849,0.0070230925541081,0.005038547515869141,0.21595916000001125,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",5,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.14521517199994033,0.00012110519409179758
176,0.6979985193096405,0.035332566632452364,0.0019147872924804687,0.7099644900272135,0.009319970969283295,0.009645986557006835,27.291917496,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",38,MissForest,,Hashing,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,1.5317886738115796,-0.00014487457275390542
177,0.6969483609264209,0.036623725840979296,0.002021503448486328,0.7115984548139888,0.009759655466972559,0.004564428329467772,1.878602352000144,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': None}",12,SimpleImputer,'mean',Hashing,None,Ridge,1.2376281656621206,-3.815841674804617e-05
178,0.6969483609264209,0.036623725840979296,0.0016282081604003904,0.7115984548139888,0.009759655466972559,0.0049103260040283215,1.877362159999848,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': None}",15,SimpleImputer,'mean',Hashing,None,Ridge,1.2363879736618246,-0.00043145370483398376
179,0.6932696442411628,0.038605666541466965,0.0016072750091552734,0.7094814349032204,0.010518475881896987,0.004035472869873047,1.9407050179997896,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': None}",20,KNNImputer,,Hashing,None,Ridge,1.3777707969240138,-0.00045238685607910077
180,0.6913813725501451,0.03506358786769112,0.0019578456878662108,0.7026660849383024,0.009427754715073374,0.009200620651245115,1.7861712859998988,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",45,SimpleImputer,'median',Hashing,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,1.4249969539999472,-0.00010181617736816336
181,0.6832417837355527,0.038805418887006615,0.0019134521484375,0.6947773170233971,0.010236900111776252,0.009672355651855471,2.1986165250000345,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",11,IterativeImputer,,Hashing,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,1.3537406137969126,-0.00014620971679687404
182,0.6608456493715379,0.034315648598534434,0.0015384197235107425,0.6687795319617944,0.009123488327022282,0.004060506820678711,0.22251660699998865,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': None}",7,SimpleImputer,'mean',LeaveOneOut,None,Ridge,-0.41845757933803474,-0.0005212421417236316
183,0.6526229421729528,0.034249132670236965,0.001711893081665039,0.6598567522477661,0.009014336838178693,0.0053016185760498035,25.494497266000053,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",41,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.2656315561883673,-0.0003477687835693351
184,0.6505874166295251,0.03557288976483765,0.0020953655242919927,0.6550866175502691,0.010650482541017052,0.0053896427154541005,0.3488097239999206,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",47,KNNImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.21412449707585524,3.5703659057618586e-05
185,0.6494903560390803,0.02797197473362657,0.0015959739685058596,0.6603063424873461,0.007559361845032189,0.0035193443298339845,25.59646896999993,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': None}",16,MissForest,,CustomTarget,None,Ridge,-0.16365985218849133,-0.00046368789672851453
186,0.6489083532418258,0.028754543518080936,0.0015532970428466795,0.6591556262915071,0.007851037500676466,0.004125785827636719,0.2184219799999028,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': None}",19,SimpleImputer,'mean',CustomTarget,None,Ridge,-0.42255220633812063,-0.0005063648223876947
187,0.6374320916789517,0.025841209309860558,0.001558828353881836,0.6450018920218457,0.007126183804305606,0.005341958999633789,0.5846384540000145,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,False,,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",49,IterativeImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.2602374572031074,-0.0005008335113525382
188,0.6366518473054924,0.03225725267938395,0.0018164634704589844,0.6422192393559355,0.009035659024380164,0.0066274642944335925,0.22041761700006648,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",1,SimpleImputer,'mean',CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.42055656933795693,-0.0002431983947753897
189,0.6365879022958977,0.03167960791260837,0.0016173839569091795,0.6434136169075174,0.009110882984109744,0.006715250015258789,0.3347849199999473,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,False,,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",6,KNNImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.22814930107582854,-0.0004422779083251946
190,0.6337339951271828,0.025559394745432677,0.001704263687133789,0.6440223028563856,0.007255994270802124,0.0039201736450195325,0.5832172650000302,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': None}",9,IterativeImputer,,CustomTarget,None,Ridge,-0.26165864620309165,-0.0003553981781005851
191,0.6298473317855795,0.02565497501933971,0.0016395092010498048,0.6399859705967688,0.007108027168798953,0.004434680938720704,0.504708552000011,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': None}",4,IterativeImputer,,Ordinal,None,Ridge,-0.3401673592031109,-0.00042015266418456935
192,0.6230475238259687,0.021973697006933957,0.0017866134643554688,0.6284838298627068,0.007572846764890091,0.005303049087524414,0.5962989360000392,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,False,,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",13,IterativeImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.24857697520308264,-0.0002730484008789053
193,0.6230475238259687,0.021973697006933957,0.0025814056396484377,0.6284838298627068,0.007572846764890091,0.0047078609466552745,0.5863108490000286,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,False,,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",44,IterativeImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.2585650622030933,0.0005217437744140636
194,0.5984847520146876,0.015267494470338646,0.0023619651794433588,0.6073076617468451,0.025606296542468092,0.004799509048461914,0.1439413110001624,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",8,SimpleImputer,'mean',Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.497032875337861,0.00030230331420898465
195,0.5984847520146876,0.015267494470338646,0.0018552303314208984,0.6073076617468451,0.025606296542468092,0.006349563598632813,0.14568486699999994,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",46,SimpleImputer,'mean',Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.49528931933802345,-0.00020443153381347577
196,0.5717107470709949,0.018515731516082656,0.0017363071441650394,0.5780622574709484,0.008306973798897456,0.007462406158447265,25.514260673999843,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",28,MissForest,,Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.2458681481885776,-0.00032335472106933476
197,0.5717107470709949,0.018515731516082656,0.002456951141357422,0.5780622574709484,0.008306973798897456,0.0064092159271240245,25.45289363100005,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",43,MissForest,,Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.3072351911883686,0.0003972892761230479
198,0.5669350276827375,0.02034082569951938,0.0017255783081054688,0.5734478346989249,0.01152068824231637,0.006637763977050781,0.2746520190000865,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",32,KNNImputer,,Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.28828220207568933,-0.0003340835571289053
199,0.05790533816036705,0.02542684935985396,0.0019132137298583985,0.0698451768265416,0.006565948870804221,0.0063342094421386715,0.1438322630001494,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",37,SimpleImputer,'median',Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Ridge,-0.21734206899980218,-0.0001464481353759756
200,0.7469204577870687,0.033033126289571925,0.10337786674499512,0.9648741761998778,0.0016352359922748904,1.3248651504516602,25.496342284000093,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",18,MissForest,,LeaveOneOut,None,Random Forest,-0.2637865381883273,-0.001433811187744119
201,0.7469204577870687,0.03303312628957194,0.1033033847808838,0.9648741761998778,0.0016352359922748904,1.3303720474243164,25.479125476000267,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",24,MissForest,,LeaveOneOut,None,Random Forest,-0.2810033461881538,-0.0015082931518554388
202,0.7469204577870687,0.03303312628957194,0.10380110740661623,0.9648741761998778,0.0016352359922748904,1.3313226699829102,25.690840253999795,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",25,MissForest,,LeaveOneOut,None,Random Forest,-0.06928856818862528,-0.0010105705261230086
203,0.7469204577870687,0.0330331262895719,0.10345954895019532,0.9648741761998778,0.0016352359922748904,1.3297685146331788,25.516166247999987,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",26,MissForest,,LeaveOneOut,None,Random Forest,-0.24396257418843348,-0.0013521289825439153
204,0.7469204577870687,0.0330331262895719,0.10331306457519533,0.9648741761998778,0.0016352359922748904,1.3288898944854737,25.57839090099969,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",28,MissForest,,LeaveOneOut,None,Random Forest,-0.18173792118873067,-0.001498613357543907
205,0.7390501345466148,0.02664904648686514,0.1082536220550537,0.9642084347769474,0.0019863221560246693,1.2763923168182374,0.2234325429999444,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",46,SimpleImputer,'mean',LeaveOneOut,None,Random Forest,-0.41754164333807897,0.0034419441223144664
206,0.7326292611598703,0.02811534662473296,0.10495176315307617,0.9630139271702024,0.001241607076043701,1.3145620822906494,0.6207736439996552,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",40,IterativeImputer,,LeaveOneOut,None,Random Forest,-0.2241022672034667,0.00014008522033692739
207,0.7326292611598703,0.02811534662473299,0.1032963275909424,0.9630139271702024,0.001241607076043701,1.3276362895965577,0.5875706589999936,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",44,IterativeImputer,,LeaveOneOut,None,Random Forest,-0.2573052522031283,-0.0015153503417968395
208,0.7314232752078208,0.028406128390591014,0.10373172760009766,0.9639173196643502,0.001254732943729085,1.32881817817688,0.3330299129997911,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",32,KNNImputer,,LeaveOneOut,None,Random Forest,-0.22990430807598472,-0.0010799503326415771
209,0.7314232752078208,0.028406128390591,0.10679001808166504,0.9639173196643502,0.001254732943729085,1.3094419956207275,0.3342675389999385,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",35,KNNImputer,,LeaveOneOut,None,Random Forest,-0.22866668207583735,0.0019783401489257973
210,0.7314232752078207,0.028406128390591017,0.10330133438110352,0.9639173196643502,0.001254732943729085,1.3288658142089844,0.3331139100000655,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",39,KNNImputer,,LeaveOneOut,None,Random Forest,-0.22982031107571033,-0.0015103435516357205
211,0.7274926792272868,0.03162383368868888,0.103250789642334,0.9630526771998028,0.001410656497956474,1.609381628036499,0.6012689280000814,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",49,IterativeImputer,,LeaveOneOut,None,Random Forest,-0.24360698320304053,-0.001560888290405238
212,0.7225727395843553,0.030550580216539683,0.10404434204101562,0.9625485197695802,0.0015170193080109474,1.907598066329956,26.057722472000023,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",10,MissForest,,CustomOneHot,None,Random Forest,0.29759364981160275,-0.0007673358917236195
213,0.7225727395843553,0.030550580216539683,0.10454268455505372,0.9625485197695802,0.0015170193080109474,1.9560083866119384,25.934305611000127,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",21,MissForest,,CustomOneHot,None,Random Forest,0.17417678881170673,-0.0002689933776855169
214,0.7225727395843553,0.030550580216539683,0.10716691017150877,0.9625485197695802,0.0015170193080109474,1.9613349914550784,26.06214661900003,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",22,MissForest,,CustomOneHot,None,Random Forest,0.302017796811608,0.0023552322387695307
215,0.7225727395843553,0.030550580216539683,0.10690851211547853,0.9625485197695802,0.0015170193080109474,1.9586053371429444,25.934181712000278,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",23,MissForest,,CustomOneHot,None,Random Forest,0.17405288981185763,0.002096834182739288
216,0.7186923892837689,0.03200909905134496,0.10348811149597167,0.960596800022832,0.0009076130501859584,1.695467233657837,0.3605242210001052,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",3,KNNImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.20241000007567062,-0.0013235664367675648
217,0.7165026548920211,0.026836739172984868,0.1065798282623291,0.9601844497692421,0.0015906715963678198,1.676330614089966,25.59709877700016,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",31,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.16303004518826114,0.0017681503295898654
218,0.7165026548920211,0.02683673917298486,0.10713915824890136,0.9601844497692421,0.0015906715963678198,1.6738874435424804,25.566832196999712,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",33,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.19329662518870805,0.002327480316162117
219,0.7155247211769618,0.0355803817072441,0.10386366844177246,0.9596447006401094,0.0011677889568791114,1.3300391674041747,0.23377000100026635,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",5,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.12740433099968523,-0.0009480094909667808
220,0.7140907889743267,0.029330651454483183,0.10381026268005372,0.9602450032224876,0.0011739425954091546,1.3323934555053711,25.698933386999673,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",27,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.06119543518874693,-0.001001415252685517
221,0.7140907889743267,0.029330651454483138,0.1039151668548584,0.9602450032224876,0.0011739425954091546,1.3308424472808835,25.507686666000158,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",29,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.2524421561882626,-0.0008965110778808433
222,0.7140907889743267,0.029330651454483183,0.10400967597961426,0.9602450032224876,0.0011739425954091546,1.3329969882965087,25.67576620999989,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",36,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.08436261218853147,-0.0008020019531249784
223,0.7124141278570634,0.01124528371193937,0.10697026252746583,0.9603355696873592,0.0013324100047035587,5.3766679763793945,0.5740028879999954,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",2,SimpleImputer,'mean',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.06697129833802795,0.0021585845947265925
224,0.7109793297730868,0.03411229961798068,0.10649223327636717,0.959394975963222,0.0009754495428505836,1.679338550567627,0.24545674899991354,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",45,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.11571758300003804,0.001680555343627932
225,0.7102309730535391,0.03680896086810658,0.1089491844177246,0.9601298188964176,0.000848733953993079,1.6505044937133788,0.22159080900019035,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",17,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.13958352299976123,0.0041375064849853566
226,0.7102309730535388,0.03680896086810654,0.10340194702148438,0.9601298188964176,0.000848733953993079,1.6943912982940674,0.21341093599994565,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",37,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.14776339600000593,-0.0014097309112548612
227,0.7089008139816964,0.0281287263322326,0.10335335731506347,0.9608483757032944,0.001550141753468264,1.9827608108520507,0.9347679140000764,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",14,IterativeImputer,,CustomOneHot,None,Random Forest,0.08989200279695453,-0.0014583206176757707
228,0.696333738838985,0.03019431372169042,0.10773887634277343,0.9585517968987359,0.001456277441703503,1.4501085758209231,1.789466577999974,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",12,SimpleImputer,'mean',Hashing,None,Random Forest,1.1484923916619507,0.002927198410034193
229,0.696333738838985,0.030194313721690368,0.10344119071960448,0.9585517968987359,0.001456277441703503,1.4836451053619384,1.9017659269998148,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",15,SimpleImputer,'mean',Hashing,None,Random Forest,1.2607917406617914,-0.0013704872131347634
230,0.6949204245798657,0.030796375816284288,0.1082315444946289,0.9583651128441476,0.001226305774497512,1.4486131191253662,1.9161409880002795,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",20,KNNImputer,,Hashing,None,Random Forest,1.3532067669245036,0.0034198665618896673
231,0.6934960091197006,0.032488981192717516,0.10348091125488283,0.9580000132335484,0.001406287059689577,1.3287153720855711,25.523229973000067,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",16,MissForest,,CustomTarget,None,Random Forest,-0.23689884918835347,-0.001330766677856407
232,0.6934960091197006,0.03248898119271745,0.10620503425598143,0.9580000132335484,0.001406287059689577,1.2716397762298584,25.61472388400034,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",43,MissForest,,CustomTarget,None,Random Forest,-0.1454049381880793,0.0013933563232421953
233,0.6934960091197006,0.03248898119271748,0.10566325187683104,0.9580000132335484,0.001406287059689577,1.3156027793884275,25.470272731000023,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",48,MissForest,,CustomTarget,None,Random Forest,-0.2898560911883976,0.0008515739440917991
234,0.6920596561614347,0.02745268542891686,0.10685858726501464,0.958330713526898,0.0016977983819739027,1.259676456451416,0.22834462199989505,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",19,SimpleImputer,'mean',CustomTarget,None,Random Forest,-0.41262956433812836,0.002046909332275401
235,0.6905130077233557,0.029089085008325175,0.10296225547790527,0.958240376736574,0.0013849689741390204,1.3271299839019777,0.5105057959999613,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",4,IterativeImputer,,Ordinal,None,Random Forest,-0.3343701152031606,-0.0018494224548339655
236,0.6802467035064791,0.023722243494846987,0.1097914695739746,0.9566065179987676,0.0016243430243158491,1.2698315620422362,0.5908203499998308,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",9,IterativeImputer,,CustomTarget,None,Random Forest,-0.2540555612032911,0.004979791641235368
237,0.6788720076710656,0.026596867725165903,0.10372214317321778,0.9546850096985916,0.0017857826651023461,1.1495938301086426,0.1494635100002597,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",8,SimpleImputer,'mean',Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.4915106763377637,-0.0010895347595214627
238,0.6730389783172341,0.02401686316513226,0.10354022979736327,0.9542212038119768,0.001852159574380997,1.1496403694152832,25.403589200000173,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",50,MissForest,,Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.3565396221882473,-0.0012714481353759688
239,0.6678603298671456,0.02321194258639047,0.10496530532836916,0.954500688630198,0.00102791897567765,2.2384764194488525,2.2763861389998965,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",11,IterativeImputer,,Hashing,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,1.4315102277967746,0.00015362739562992112
240,0.6498045066038707,0.03882919099638281,0.1052109718322754,0.9522234471228408,0.001248272215016425,1.1481480121612548,25.57925864699973,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",38,MissForest,,LeaveOneOut,None,Random Forest,-0.18087017518869075,0.0003992938995361628
241,0.6431336774696023,0.04060346753114686,0.10340404510498047,0.951733140085572,0.001993180169927397,1.1519891262054442,0.2304140829996868,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",30,SimpleImputer,'median',LeaveOneOut,None,Random Forest,-0.13076024900026478,-0.0014076328277587702
242,0.6420438122815756,0.03682165680556016,0.10336360931396484,0.9524386825335028,0.0020358981886491245,1.1501441955566407,0.2301657389998581,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",7,SimpleImputer,'mean',LeaveOneOut,None,Random Forest,-0.4108084473381653,-0.0014480686187744035
243,0.6287225585726637,0.02770617484349224,0.10333137512207033,0.9496036065928072,0.0016607239803028975,1.2501943588256836,0.3362431830000787,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",6,KNNImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.22669103807569713,-0.0014803028106689098
244,0.6231031799947232,0.025970952951292543,0.10421042442321778,0.9501314584705284,0.0010633253536681926,1.6123152256011963,25.57690890599997,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",41,MissForest,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.1832199161884489,-0.0006012535095214627
245,0.6164185889536821,0.03238510139257129,0.10376787185668944,0.9473268922965716,0.0018437954357248358,1.2515349864959715,0.22908956999981456,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",1,SimpleImputer,'mean',CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.41188461633820883,-0.0010438060760497997
246,0.614430812019495,0.02976241048445514,0.1039653778076172,0.9474656130430574,0.001489165153908541,1.1506471633911133,0.22862352499987534,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",34,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.13255080700007624,-0.000846300125122032
247,0.6099772238398895,0.03972488696914055,0.10364046096801756,0.948667429968764,0.0012108234208033355,1.1497182369232175,0.2409797699997398,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",42,SimpleImputer,'mean',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.3999944163382836,-0.0011712169647216802
248,0.5989480254231887,0.0247771337528235,0.10386877059936524,0.9447667026286024,0.0008950531093763859,1.1337077140808105,0.6108657800000401,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",13,IterativeImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.23401013120308178,-0.0009429073333740018
249,0.4794583895299666,0.05058597033598094,0.10375432968139647,0.9284214347601688,0.002261505529740509,0.7079041957855224,0.26665084999967803,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",47,KNNImputer,,Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Random Forest,-0.2962833710760978,-0.0010573482513427657
250,0.7487477919657691,0.017009962942810042,0.002454948425292969,0.7836543585132093,0.0052257629960621365,0.02813968658447265,25.929694793999943,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",21,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,0.16956597181152233,0.0003951015472412108
251,0.7487477919657691,0.017009962942810042,0.002626466751098633,0.7836543585132093,0.0052257629960621365,0.02669610977172852,25.95335291799995,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",22,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,0.1932240958115301,0.0005666198730468748
252,0.7487477919657691,0.017009962942810042,0.002435302734375,0.7836543585132093,0.0052257629960621365,0.02762637138366699,25.987112330999928,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",23,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,0.2269835088115073,0.0003754558563232417
253,0.7487477919657691,0.017009962942810042,0.002923870086669922,0.7836543585132093,0.0052257629960621365,0.02837791442871094,25.942575003999988,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",24,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,0.18244618181156724,0.0008640232086181638
254,0.7487477919657691,0.017009962942810042,0.0022796630859375,0.7836543585132093,0.0052257629960621365,0.025979900360107427,25.930397115999995,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",25,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,0.17026829381157427,0.0002198162078857419
255,0.7487477919657691,0.017009962942810042,0.0024684906005859376,0.7836543585132093,0.0052257629960621365,0.026660728454589843,25.950159562999946,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",26,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,0.19003074081152604,0.0004086437225341794
256,0.7487477919657691,0.017009962942810042,0.0023844242095947266,0.7836543585132093,0.0052257629960621365,0.02661266326904297,25.94862607200002,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",27,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,0.18849724981160065,0.00032457733154296836
257,0.7487477919657691,0.017009962942810042,0.002506875991821289,0.7836543585132093,0.0052257629960621365,0.02686195373535156,25.968407695999986,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",29,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,0.2082788738115653,0.00044702911376953095
258,0.7487477919657691,0.017009962942810042,0.0023382186889648444,0.7836543585132093,0.0052257629960621365,0.026408672332763672,25.929685793000086,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",31,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,0.16955697081166576,0.00027837181091308616
259,0.7487477919657691,0.017009962942810042,0.0024030685424804694,0.7836543585132093,0.0052257629960621365,0.02671899795532227,25.959866227000017,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",33,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,0.19973740481159652,0.00034322166442871116
260,0.7487477919657691,0.017009962942810042,0.0025778770446777343,0.7836543585132093,0.0052257629960621365,0.02782444953918457,26.05716673200004,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",36,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,0.29703790981162115,0.0005180301666259761
261,0.7487477919657691,0.017009962942810042,0.0025481224060058595,0.7836543585132093,0.0052257629960621365,0.026285505294799803,25.84653063600012,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",48,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,0.08640181381170109,0.00048827552795410126
262,0.7443201573242333,0.019370740785868097,0.002526330947875977,0.7790446697213691,0.006005637696077939,0.02875227928161621,0.5674018130000604,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",2,SimpleImputer,'mean',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.07357237333796296,0.00046648406982421897
263,0.7443201573242333,0.019370740785868097,0.002559041976928711,0.7790446697213691,0.006005637696077939,0.027115583419799805,0.5774102059999677,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",42,SimpleImputer,'mean',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.06356398033805566,0.0004991950988769527
264,0.7421793862615296,0.03447406965970528,0.0015293121337890624,0.7503074495955098,0.009089524360676155,0.004622697830200195,25.590249434999922,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': None}",18,MissForest,,LeaveOneOut,None,Linear Regression,-0.16987938718849804,-0.0005305347442626958
265,0.7395558870695781,0.014556344205142891,0.0024856090545654296,0.7778387300748572,0.004738422000132482,0.026662206649780272,0.6917935450001096,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",35,KNNImputer,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,0.12885932392433375,0.0004257621765136714
266,0.7395558870695781,0.014556344205142891,0.002397060394287109,0.7778387300748572,0.004738422000132482,0.02684869766235352,0.6857000620000235,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",39,KNNImputer,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,0.1227658409242477,0.00033721351623535074
267,0.7371638783533662,0.03902727157000633,0.0018912315368652343,0.7447946256415725,0.010455217967888977,0.007363653182983399,0.3584757119999722,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",3,KNNImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.20445850907580365,-0.0001686153411865239
268,0.7297954679240045,0.034261808204418216,0.0017244338989257813,0.7366980535234097,0.009093623862494092,0.006238508224487305,0.2132102710000936,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",17,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.14796406099985798,-0.0003354129791259769
269,0.7291467674379748,0.033965907427811984,0.002360153198242188,0.7418778327466323,0.005635789103025046,0.02342624664306641,0.5818021759998828,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",30,SimpleImputer,'median',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,0.22062784399993124,0.0003003063201904299
270,0.7291467674379748,0.033965907427811984,0.002423906326293945,0.7418778327466323,0.005635789103025046,0.026709032058715818,0.5529269159999329,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",34,SimpleImputer,'median',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,0.19175258399998135,0.00036405944824218677
271,0.7217511257581151,0.032679770430454606,0.003589296340942383,0.7326916075536054,0.005658835906650971,0.024662494659423828,0.9353350860001228,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",40,IterativeImputer,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,0.09045917479700094,0.0015294494628906247
272,0.7167309112291675,0.03822984583107136,0.0017444610595703125,0.7219177597873229,0.00702308844287267,0.00691061019897461,0.21678744700000152,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",5,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.14438688499995006,-0.00031538581848144565
273,0.6979423473291694,0.03530870982751535,0.0019107341766357421,0.7099672084790679,0.009319763296023478,0.00909099578857422,27.151337429000026,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",38,MissForest,,Hashing,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,1.391208606811606,-0.00014911270141601605
274,0.6963428765571745,0.037100485712498105,0.001890850067138672,0.7116616203425205,0.009782868746069184,0.00538330078125,1.886571789999948,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': None}",12,SimpleImputer,'mean',Hashing,None,Linear Regression,1.2455976036619245,-0.00016899681091308628
275,0.6963428765571745,0.037100485712498105,0.0017035484313964845,0.7116616203425205,0.009782868746069184,0.005500602722167969,1.7609088409999458,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': None}",15,SimpleImputer,'mean',Hashing,None,Linear Regression,1.1199346546619224,-0.00035629844665527365
276,0.6924749789011061,0.03941561010525682,0.0017673492431640625,0.7095611027707143,0.010556292536141005,0.0052209854125976575,1.9807363999999552,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': None}",20,KNNImputer,,Hashing,None,Linear Regression,1.4178021789241795,-0.00029249763488769565
277,0.6913413422009578,0.03507578174969488,0.0019001960754394527,0.7026690217468097,0.009427738548069456,0.008199167251586916,1.9127488700000868,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",45,SimpleImputer,'median',Hashing,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,1.5515745380001351,-0.0001596508026123055
278,0.6831949877675969,0.03883131726567067,0.0019884109497070312,0.6947801420935862,0.010236860651010298,0.009537887573242188,2.1160343489999605,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",11,IterativeImputer,,Hashing,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,1.2711584377968386,-7.143592834472695e-05
279,0.6606917606296697,0.034423630334548615,0.0014073371887207034,0.6689213385009026,0.009127233251934774,0.003048419952392578,0.22602411299999406,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': None}",7,SimpleImputer,'mean',LeaveOneOut,None,Linear Regression,-0.41495007333802936,-0.0006525096893310548
280,0.6526084281588149,0.03426102289222882,0.0019721031188964845,0.6598568944159281,0.009014339523487623,0.006016397476196289,25.60930959699999,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",41,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.15081922518843172,-8.774375915527374e-05
281,0.6505801129692226,0.03558874562147327,0.0017643451690673828,0.6550867482452609,0.010650488133087884,0.006681060791015625,0.3524515449998944,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",47,KNNImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.21048267607588145,-0.00029550170898437543
282,0.6494368919719726,0.028034404503709063,0.0014031887054443359,0.6603094247656839,0.007560426515692403,0.004830408096313478,25.505093287000022,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': None}",16,MissForest,,CustomTarget,None,Linear Regression,-0.25503553518839794,-0.0006566581726074223
283,0.6488679692968435,0.028753979843144536,0.0015358448028564456,0.6591605614096296,0.007851278804231816,0.004434728622436522,0.2177527830000372,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': None}",19,SimpleImputer,'mean',CustomTarget,None,Linear Regression,-0.4232214033379862,-0.0005240020751953126
284,0.6374157886836856,0.0258480150058052,0.0017100811004638673,0.6450022160863267,0.007126188083240583,0.0065713882446289075,0.5983292939999956,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,False,,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",49,IterativeImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.24654661720312632,-0.0003497657775878909
285,0.6366451088541446,0.03226542849054076,0.0017507553100585935,0.6422193565219458,0.009035661598297348,0.008072423934936523,0.22650956500001485,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",1,SimpleImputer,'mean',CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.41446462133800854,-0.0003090915679931647
286,0.6365770983648508,0.03169128854547517,0.0018711090087890625,0.6434137430613465,0.009110886271848874,0.004908561706542969,0.34420239999997193,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,False,,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",6,KNNImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.2187318210758039,-0.0001887378692626957
287,0.6337227381135728,0.02554910959899737,0.001565408706665039,0.644027899083221,0.0072557771840502374,0.0033139705657958983,0.5730978370000912,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': None}",9,IterativeImputer,,CustomTarget,None,Linear Regression,-0.2717780742030307,-0.0004944381713867191
288,0.6298592748574883,0.025725739368353803,0.0016461372375488278,0.6399969363141473,0.007108266305927441,0.004791688919067383,0.5480490040000632,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': None}",4,IterativeImputer,,Ordinal,None,Linear Regression,-0.2968269072030587,-0.0004137096405029304
289,0.6230411844752901,0.02197402719005576,0.0017670154571533202,0.6284839780571985,0.007572848345453777,0.005833005905151368,0.5992225070000359,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,False,,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",13,IterativeImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.245653404203086,-0.00029283142089843797
290,0.6230411844752901,0.02197402719005576,0.0017354965209960935,0.6284839780571985,0.007572848345453777,0.005089712142944336,0.6033366489998571,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,False,,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",44,IterativeImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.24153926220326483,-0.0003243503570556647
291,0.5984841927869728,0.015267151509661712,0.0016988277435302734,0.6073077339982521,0.02560631685614855,0.00612945556640625,0.1467370090000486,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",8,SimpleImputer,'mean',Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.4942371773379748,-0.00036101913452148485
292,0.5984841927869728,0.015267151509661712,0.0017731666564941406,0.6073077339982521,0.02560631685614855,0.005510568618774414,0.1467434719997982,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",46,SimpleImputer,'mean',Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.4942307143382252,-0.0002866802215576176
293,0.5717086378042995,0.01851459111742454,0.0016763687133789062,0.5780623035450393,0.008306977757797412,0.006327009201049805,25.54787275000001,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",28,MissForest,,Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.21225607218840992,-0.000383478164672852
294,0.5717086378042995,0.01851459111742454,0.0017144203186035155,0.5780623035450393,0.008306977757797412,0.007356786727905273,25.62054525100007,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",43,MissForest,,Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.13958357118834996,-0.00034542655944824275
295,0.5669330028435109,0.020339043819065938,0.0018707275390625,0.5734478819117953,0.011520696530124185,0.006284093856811525,0.2696754130001864,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",32,KNNImputer,,Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.29325880807558946,-0.00018911933898925828
296,0.05790492879762652,0.02542812644975349,0.0021352291107177733,0.06984517687512151,0.006565948883752516,0.005087614059448242,0.14948823400004585,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",37,SimpleImputer,'median',Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",Linear Regression,-0.21168609799990573,7.538223266601507e-05
297,-3.491316813572856e+20,5.8778518688588975e+20,0.0018115520477294921,0.7992997071387424,0.004819185633592968,0.01573934555053711,25.945306485999932,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': None}",10,MissForest,,CustomOneHot,None,Linear Regression,0.1851776638115119,-0.00024829483032226605
298,-3.491316813572856e+20,5.8778518688588975e+20,0.0019029140472412109,0.7992997071387424,0.004819185633592968,0.014763879776000974,25.94888409100008,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': None}",50,MissForest,,CustomOneHot,None,Linear Regression,0.18875526881166138,-0.00015693283081054735
299,-2.792249902148972e+22,3.449117877865939e+22,0.0019410610198974609,0.7873263480828239,0.007180675874285703,0.01571965217590332,0.9281698780000625,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': None}",14,IterativeImputer,,CustomOneHot,None,Linear Regression,0.08329396679694057,-0.00011878585815429735
300,0.6686857870160099,0.026067462684091464,0.10398783683776856,0.7856676296903574,0.004909244730859729,0.006625986099243164,0.6096455279998736,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",49,IterativeImputer,,LeaveOneOut,None,kNN,-0.2352303832032483,-0.0005879936218261272
301,0.6683916879193527,0.034808835773310384,0.10362319946289064,0.785544415284181,0.006657940633565485,0.0071661949157714845,25.49538884999993,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",18,MissForest,,LeaveOneOut,None,kNN,-0.2647399721884902,-0.0009526309967040486
302,0.6683916879193527,0.034808835773310384,0.10329527854919432,0.785544415284181,0.006657940633565485,0.007259893417358399,25.591807754,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",24,MissForest,,LeaveOneOut,None,kNN,-0.16832106818841908,-0.001280551910400371
303,0.6683916879193527,0.034808835773310384,0.1054597854614258,0.785544415284181,0.006657940633565485,0.007324504852294922,25.610366376999988,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",25,MissForest,,LeaveOneOut,None,kNN,-0.14976244518843274,0.0008839550018311104
304,0.6683916879193527,0.034808835773310384,0.10342569351196287,0.785544415284181,0.006657940633565485,0.008052349090576172,25.491037015000078,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",26,MissForest,,LeaveOneOut,None,kNN,-0.26909180718834236,-0.0011501369476318163
305,0.6683916879193527,0.034808835773310384,0.10309247970581056,0.785544415284181,0.006657940633565485,0.007223367691040039,25.58559752300016,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",28,MissForest,,LeaveOneOut,None,kNN,-0.17453129918825994,-0.0014833507537841267
306,0.6677665945672485,0.031381448669384894,0.11078844070434572,0.7843201679881239,0.005154600178159595,0.02240161895751953,25.93527459400002,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",10,MissForest,,CustomOneHot,None,kNN,0.17514577181160007,0.006212610244751032
307,0.6677665945672485,0.031381448669384894,0.10440988540649414,0.7843201679881239,0.005154600178159595,0.016215801239013672,25.970510906000072,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",21,MissForest,,CustomOneHot,None,kNN,0.2103820838116519,-0.0001659450531005524
308,0.6677665945672485,0.031381448669384894,0.10794978141784667,0.7843201679881239,0.005154600178159595,0.022786092758178708,25.945765544000093,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",22,MissForest,,CustomOneHot,None,kNN,0.18563672181167234,0.0033739509582519783
309,0.6677665945672485,0.031381448669384894,0.11028051376342772,0.7843201679881239,0.005154600178159595,0.022739124298095704,25.942910090999703,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",23,MissForest,,CustomOneHot,None,kNN,0.18278126881128287,0.00570468330383303
310,0.6642211226623344,0.017907064405755683,0.10690979957580568,0.7804205932250321,0.008412853951171107,0.021396303176879884,0.941573255000094,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",14,IterativeImputer,,CustomOneHot,None,kNN,0.09669734379697215,0.0023339691162109905
311,0.6636879637044404,0.03381712249121968,0.10403556823730467,0.7836504344195805,0.004809833238931755,0.009932994842529295,0.22403273300005824,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",46,SimpleImputer,'mean',LeaveOneOut,None,kNN,-0.4169414533379652,-0.0005402622222900194
312,0.6628299117161438,0.039262352985110265,0.1033505916595459,0.7833223303864146,0.006532766171593918,0.007061100006103516,25.577508201,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",31,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.18262062118841982,-0.0012252388000487946
313,0.6628299117161438,0.039262352985110265,0.10650420188903807,0.7833223303864146,0.006532766171593918,0.006530475616455078,25.611687424000134,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",33,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.14844139818828594,0.0019283714294433818
314,0.6627502772610502,0.03220859734862445,0.10736031532287596,0.7790408695660848,0.007334700824621056,0.03452234268188477,0.5696990779999851,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",2,SimpleImputer,'mean',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.0712751083380383,0.0027844848632812697
315,0.6623643685461102,0.03950540488493998,0.10340876579284668,0.7810593926160312,0.0075186539467720906,0.006591176986694336,25.696044215999787,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",27,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.06408460618863288,-0.0011670646667480133
316,0.6623643685461102,0.03950540488493998,0.10449385643005372,0.7810593926160312,0.0075186539467720906,0.009119033813476562,25.691770130999885,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",29,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.06835869118853566,-8.197402954096544e-05
317,0.6623643685461102,0.03950540488493998,0.10344905853271484,0.7810593926160312,0.0075186539467720906,0.006732368469238281,25.582396533000068,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",36,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.17773228918835215,-0.0011267719268798493
318,0.6612491223985687,0.034810456473162464,0.10684642791748047,0.7823415190660408,0.006592154948893834,0.010089778900146484,0.3339136719996532,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",32,KNNImputer,,LeaveOneOut,None,kNN,-0.22902054907612263,0.002270597457885784
319,0.6612491223985687,0.034810456473162464,0.10326967239379883,0.7823415190660408,0.006592154948893834,0.007164335250854493,0.3347920279998107,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",35,KNNImputer,,LeaveOneOut,None,kNN,-0.22814219307596512,-0.0013061580657958566
320,0.6612491223985687,0.034810456473162464,0.10386719703674316,0.7823415190660408,0.006592154948893834,0.00719904899597168,0.34324390699975993,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",39,KNNImputer,,LeaveOneOut,None,kNN,-0.2196903140760159,-0.0007086334228515317
321,0.6607053300726421,0.0337793129636698,0.10442914962768554,0.7813809326866096,0.004520930823486354,0.010232734680175779,0.2436441740001101,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",45,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.11753015799984148,-0.00014668083190914893
322,0.66009659317124,0.03227831417552668,0.10333890914916992,0.7831767874756641,0.007044649002721249,0.0067362308502197255,0.22660180899993065,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",17,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.13457252300002093,-0.0012369213104247712
323,0.66009659317124,0.03227831417552668,0.10518226623535157,0.7831767874756641,0.007044649002721249,0.008841276168823242,0.2285025559999667,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",37,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.1326717759999849,0.0006064357757568778
324,0.6591127697842684,0.03081239977384245,0.10305862426757813,0.7805696376899391,0.005229149239118908,0.007370424270629883,0.5931223779998618,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",40,IterativeImputer,,LeaveOneOut,None,kNN,-0.2517535332032601,-0.0015172061920165625
325,0.6591127697842684,0.03081239977384245,0.1039353370666504,0.7805696376899391,0.005229149239118908,0.006039667129516603,0.5764860940003018,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",44,IterativeImputer,,LeaveOneOut,None,kNN,-0.26838981720282007,-0.0006404933929442941
326,0.6554415654796474,0.037666196042758684,0.103452730178833,0.7810494413525242,0.005163280086356848,0.007254695892333985,0.3628072609999435,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",3,KNNImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.20012696007583236,-0.0011231002807616935
327,0.6535140858545944,0.03654161838901891,0.104351806640625,0.7758157483878151,0.004515592302817285,0.006752729415893555,0.21612912400019013,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",5,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.14504520799976145,-0.00022402381896968748
328,0.6301203674291466,0.023158269775766863,0.10519018173217773,0.759407772888277,0.002266007846231045,0.007700967788696289,2.0264189879999317,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",20,KNNImputer,,Hashing,None,kNN,1.463484766924156,0.0006143512725830386
329,0.6270081555095002,0.02199226446310271,0.10386481285095214,0.7577303020969306,0.00424919964251972,0.012865686416625976,1.9237976160000017,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",12,SimpleImputer,'mean',Hashing,None,kNN,1.2828234296619783,-0.0007110176086425474
330,0.6270081555095002,0.02199226446310271,0.10429787635803224,0.7577303020969306,0.00424919964251972,0.010009860992431641,1.7869737910000367,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",15,SimpleImputer,'mean',Hashing,None,kNN,1.1459996046620133,-0.0002779541015624498
331,0.6220727208776308,0.025868290355487024,0.10461177825927734,0.7564450315484021,0.007308911439722902,0.010341167449951172,2.1438752389999536,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",11,IterativeImputer,,Hashing,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,1.2989993277968317,3.594779968264794e-05
332,0.5892090349365059,0.04328957530827834,0.10334906578063964,0.7352884559585285,0.01152705972051163,0.0054623126983642575,0.5131221240001196,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",4,IterativeImputer,,Ordinal,None,kNN,-0.3317537872030023,-0.0012267646789550501
333,0.5882261191317013,0.044102545227028514,0.10515551567077636,0.7325885219528757,0.010113411073434844,0.007986164093017578,0.16086082999981954,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",8,SimpleImputer,'mean',Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.48011335633820384,0.0005796852111816658
334,0.5838937451499879,0.04986074112182976,0.10461997985839844,0.7332621123428743,0.010310036301535394,0.006335115432739258,0.507976767999935,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",50,IterativeImputer,,Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.3368991432031869,4.414939880374724e-05
335,0.5661014260109678,0.040192330233611726,0.10479402542114258,0.719857673509612,0.007109386384108398,0.009308719635009764,25.583767981000165,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",41,MissForest,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.1763608411882558,0.00021819496154788787
336,0.5658879516408514,0.028580373747043863,0.10309982299804688,0.7207465441345303,0.005927254326352086,0.007130146026611328,25.586810674000393,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",16,MissForest,,CustomTarget,None,kNN,-0.17331814818802727,-0.0014760074615478153
337,0.5658879516408514,0.028580373747043863,0.10315361022949217,0.7207465441345303,0.005927254326352086,0.007193946838378906,25.504089165000096,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",43,MissForest,,CustomTarget,None,kNN,-0.25603965718832455,-0.0014222202301025222
338,0.5658879516408514,0.028580373747043863,0.1042494297027588,0.7207465441345303,0.005927254326352086,0.009580039978027343,25.579259402999927,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",48,MissForest,,CustomTarget,None,kNN,-0.1808694191884932,-0.0003264007568358901
339,0.5622611811217849,0.028510148551219583,0.10450129508972167,0.7179594952868005,0.004834209186863757,0.00856313705444336,0.3434729499999776,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,False,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",6,KNNImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.21946127107579827,-7.453536987302167e-05
340,0.5605326167686339,0.032366092790511475,0.10485053062438963,0.7119506612563979,0.006098879091999646,0.00783538818359375,0.2276441079998221,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",7,SimpleImputer,'mean',LeaveOneOut,None,kNN,-0.4133300783382013,0.0002747001647949443
341,0.5598334058963068,0.03265988083503621,0.10481553077697754,0.7078584046234907,0.005979305584774482,0.006944131851196289,0.234310646999802,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",30,SimpleImputer,'median',LeaveOneOut,None,kNN,-0.12686368500014958,0.00023970031738285158
342,0.5594231326307415,0.027706265481891142,0.10425629615783692,0.7161774451739467,0.004758818899866863,0.008584260940551758,0.23240153100005045,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",19,SimpleImputer,'mean',CustomTarget,None,kNN,-0.40857265533797293,-0.00031953430175776787
343,0.5593731597508798,0.035065914061149964,0.10372600555419922,0.7153626683498807,0.009992698179210904,0.008636856079101562,25.624973604999923,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",38,MissForest,,LeaveOneOut,None,kNN,-0.13515521718849755,-0.000849824905395466
344,0.5585304798202259,0.030655585182573813,0.1031961441040039,0.7089573657964172,0.008758831089603682,0.006956577301025391,0.5943870579999384,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",9,IterativeImputer,,CustomTarget,None,kNN,-0.2504888532031835,-0.001379686355590784
345,0.5583721500802771,0.03413504123152152,0.10347900390625,0.7062454097880415,0.008332091526635818,0.008575630187988282,0.22342217000004894,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",42,SimpleImputer,'mean',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.41755201633797445,-0.0010968265533446847
346,0.5544182536165136,0.03702639083203806,0.10513644218444823,0.7121493869737893,0.007947154586661977,0.008126688003540041,0.2611135749998539,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",1,SimpleImputer,'mean',CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.3798606113381695,0.0005606117248535408
347,0.552923866651698,0.04368636157287095,0.10368452072143557,0.7054163804517355,0.00639838428857225,0.007539653778076171,0.2277284970000437,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",34,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.1334458349999079,-0.000891309738159124
348,0.5402954117805403,0.049455998517965234,0.1030569076538086,0.6977637942287538,0.010605424190627872,0.00502324104309082,0.5990057439998964,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,False,,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",13,IterativeImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.24587016720322552,-0.0015189228057860965
349,0.4216620935834648,0.05511421239240257,0.10414557456970217,0.6327035051113766,0.012588346975479487,0.005564069747924805,0.269627274999948,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",47,KNNImputer,,Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",kNN,-0.29330694607582786,-0.00043025588989252517
350,0.655483910050121,0.028667658545058324,0.009437417984008791,0.7226375272980224,0.00924033764576233,0.25092225074768065,0.21975879699948564,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",5,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.14141553500046594,0.0001430807113647469
351,0.655483910050121,0.028667658545058324,0.008405351638793945,0.7226375272980224,0.00924033764576233,0.2465554714202881,0.227171095999438,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",21,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.1340032360005136,-0.0008889856338500993
352,0.655483910050121,0.028667658545058324,0.008155441284179688,0.7226375272980224,0.00924033764576233,0.2462958335876465,0.22237533299994536,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",22,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.13879899900000622,-0.0011388959884643564
353,0.655483910050121,0.028667658545058324,0.008178043365478515,0.7226375272980224,0.00924033764576233,0.2452278137207031,0.22357150400057435,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",23,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.13760282799937723,-0.0011162939071655293
354,0.655483910050121,0.028667658545058324,0.008196640014648437,0.7226375272980224,0.00924033764576233,0.249106502532959,0.2324726409997311,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",24,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.12870169100022047,-0.0010976972579956074
355,0.655483910050121,0.028667658545058324,0.008594322204589843,0.7226375272980224,0.00924033764576233,0.24677438735961915,0.2225385520005148,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",25,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.13863577999943677,-0.0007000150680542012
356,0.655483910050121,0.028667658545058324,0.008758926391601562,0.7226375272980224,0.00924033764576233,0.2528422832489013,0.22738193399982265,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",26,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.13379239800012893,-0.0005354108810424821
357,0.655483910050121,0.028667658545058324,0.008185386657714844,0.7226375272980224,0.00924033764576233,0.24828686714172366,0.2320736669998951,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",28,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.12910066500005649,-0.0011089506149292005
358,0.655483910050121,0.028667658545058324,0.0084320068359375,0.7226375272980224,0.00924033764576233,0.25271286964416506,0.22450735599977634,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",29,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.13666697600017524,-0.0008623304367065439
359,0.655483910050121,0.028667658545058324,0.0082611083984375,0.7226375272980224,0.00924033764576233,0.2454991817474365,0.22606179699960194,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",30,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.13511253500034964,-0.0010332288742065446
360,0.655483910050121,0.028667658545058324,0.00839681625366211,0.7226375272980224,0.00924033764576233,0.2508614540100097,0.21761451800011852,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",33,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.14355981399983306,-0.0008975210189819342
361,0.655483910050121,0.028667658545058324,0.009859704971313476,0.7226375272980224,0.00924033764576233,0.2507009029388428,0.21361388599962086,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",36,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.14756044600033072,0.000565367698669432
362,0.6543319320339344,0.026574997216874237,0.01010451316833496,0.7384760693573247,0.009896166757841541,0.2451811790466309,25.602184059000134,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': None}",18,MissForest,,LeaveOneOut,None,AdaBoost,-0.15794476318828643,0.0008101758956909153
363,0.6533506335325139,0.03137871362168234,0.008945226669311523,0.7283684954575035,0.011978833687646769,0.31519594192504885,0.2224493159992562,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",17,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.1387250160006954,-0.0003491106033325208
364,0.6533506335325139,0.03137871362168234,0.009013175964355469,0.7283684954575035,0.011978833687646769,0.3174551963806153,0.22505128300053912,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",37,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.13612304899941247,-0.0002811613082885755
365,0.6533506335325139,0.03137871362168234,0.008873128890991209,0.7283684954575035,0.011978833687646769,0.3106632232666016,0.2199170479998429,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",43,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.14125728400010867,-0.0004212083816528354
366,0.6422765914451232,0.030900239743397014,0.009669828414916991,0.7166782046312304,0.008893853672787383,0.26340675354003906,0.3468850549998024,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",32,KNNImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.21604916607597346,0.00037549114227294726
367,0.6346863661628801,0.03954644261452205,0.008829450607299805,0.7146022403136308,0.013655804799096566,0.30784621238708504,25.630849676999787,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",34,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.12927914518863304,-0.0004648866653442392
368,0.6341412158243427,0.024423762255324482,0.008931875228881836,0.708761684881662,0.00880713882198707,0.3181070327758789,0.3542313410007409,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",3,KNNImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.20870288007503496,-0.0003624620437622083
369,0.633998899876521,0.0331450829237494,0.009104251861572266,0.7107990677888266,0.01691159892454851,0.2622066974639893,0.21914851600013208,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",46,SimpleImputer,'mean',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.4218256703378913,-0.0001900854110717786
370,0.6181969650400251,0.02564668208422234,0.008774328231811523,0.7023693910478089,0.013905052565994476,0.2592764854431152,0.2539315639996857,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",45,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.10724276800026589,-0.0005200090408325215
371,0.614934940376663,0.03624652920511813,0.010530996322631835,0.6873154898684791,0.005513128829686515,0.25368924140930177,0.6090280270000221,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",49,IterativeImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.23584788420309977,0.001236659049987791
372,0.6141190244288808,0.007636421893758021,0.00899810791015625,0.6960341723723833,0.015247512190578603,0.23590412139892575,0.14872227100022428,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': None}",50,SimpleImputer,'median',Ordinal,None,AdaBoost,-0.2124520609997273,-0.00029622936248779354
373,0.6134162595829991,0.020110774756720518,0.013905572891235351,0.7149232237472664,0.009384946089893528,0.9394049644470216,25.95364268100002,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",47,MissForest,,CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,0.193513858811599,0.004611235618591307
374,0.6077599767255762,0.01913622821757981,0.009887313842773438,0.6916606322825631,0.013771456405958598,0.26384611129760743,1.89477164300024,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': None}",20,KNNImputer,,Hashing,None,AdaBoost,1.331837421924464,0.0005929765701293936
375,0.6076911509047017,0.008761391895347442,0.012956571578979493,0.6893555398188387,0.005398270792730626,0.3699345588684082,0.9634346390002976,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': None}",14,IterativeImputer,,CustomOneHot,None,AdaBoost,0.11855872779717569,0.0036622343063354486
376,0.6068541500147114,0.013108993166214031,0.01089482307434082,0.7180697123016792,0.009123105906956407,0.9574045181274414,0.5667152910000368,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",2,SimpleImputer,'mean',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.07425889533798657,0.0016004858016967754
377,0.6004654165166311,0.013327609397600262,0.009755563735961916,0.7059376476491229,0.0074579127032427155,0.4368284702301025,0.58190536300026,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",42,SimpleImputer,'mean',CustomOneHot,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.05906882333776342,0.00046122646331787226
378,0.5973247887316624,0.009303295615349405,0.010987949371337893,0.6849410847817954,0.017453006043964058,0.2404940128326416,0.5197695540000495,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': None}",4,IterativeImputer,,Ordinal,None,AdaBoost,-0.32510635720307235,0.0016936120986938488
379,0.5938508861275453,0.030330026929355013,0.010032844543457032,0.6924167695965078,0.010521803838591037,0.2548031330108643,1.7884486399998425,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': None}",12,SimpleImputer,'mean',Hashing,None,AdaBoost,1.147474453661819,0.0007385072708129877
380,0.5938508861275453,0.030330026929355013,0.010045003890991213,0.6924167695965078,0.010521803838591037,0.2546399593353271,1.9270252070000424,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': None}",15,SimpleImputer,'mean',Hashing,None,AdaBoost,1.286051020662019,0.0007506666183471691
381,0.5930285257250036,0.01373136751172278,0.00802459716796875,0.684089257843115,0.010992162650751,0.23169279098510745,0.5952474989999246,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': None}",9,IterativeImputer,,CustomTarget,None,AdaBoost,-0.24962841220319731,-0.0012697401046752946
382,0.5916222738520591,0.022225418054486024,0.013464784622192385,0.6904117819383605,0.008981735606647848,0.3742352962493897,25.968171213999995,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': None}",10,MissForest,,CustomOneHot,None,AdaBoost,0.20804239181157413,0.004170447349548341
383,0.5830628170756642,0.020890583625379915,0.009123086929321287,0.6827910902053601,0.0091512353862808,0.2424191951751709,25.583309296999694,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': None}",16,MissForest,,CustomTarget,None,AdaBoost,-0.17681952518872635,-0.0001712503433227569
384,0.5796061935722421,0.016101184043990083,0.00894021987915039,0.6874861346530245,0.01542136411601604,0.2334122657775879,0.22641297099926305,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': None}",19,SimpleImputer,'mean',CustomTarget,None,AdaBoost,-0.41456121533876034,-0.0003541173934936536
385,0.5769672498793139,0.014104724148944413,0.008970689773559571,0.6718359417860611,0.012115718306573308,0.4025665760040283,2.284289573000024,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",11,IterativeImputer,,Hashing,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,1.4394136617969022,-0.0003236474990844732
386,0.5707265233196887,0.027872485691625152,0.010267400741577148,0.6686353790187372,0.011674470217448413,0.2225170612335205,0.24436377200072454,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': None}",7,SimpleImputer,'mean',LeaveOneOut,None,AdaBoost,-0.3966104143372988,0.0009730634689331039
387,0.562982963792515,0.02733933377221202,0.009834432601928709,0.6660346961071211,0.007504579358010166,0.2328828811645508,0.33322103499995137,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",35,KNNImputer,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.22971318607582447,0.0005400953292846646
388,0.5590265298028024,0.04288976764906021,0.008883237838745117,0.6610644093941598,0.009366756379034969,0.2558485031127929,25.720600833000393,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",40,MissForest,,LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.039527989188027135,-0.00041109943389892704
389,0.5499675988278618,0.04448754746505605,0.009124612808227541,0.6331725599457493,0.012326362807715707,0.2281012058258057,0.6050033960000292,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,False,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",13,IterativeImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.23987251520309272,-0.0001697244644165031
390,0.5490262043309296,0.05777482147342335,0.008712053298950195,0.6558802631502378,0.007702229167447047,0.22537550926208494,0.2405635370005257,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",27,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.12061079499942587,-0.0005822839736938489
391,0.5490262043309296,0.05777482147342335,0.008617973327636719,0.6558802631502378,0.007702229167447047,0.2275708198547363,0.2395457800002987,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",31,SimpleImputer,'median',LeaveOneOut,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.12162855199965289,-0.0006763639450073251
392,0.5476429076870568,0.03931027667385323,0.009193515777587893,0.6333314548495239,0.008923027905878794,0.2463249206542969,0.2214646000002176,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",1,SimpleImputer,'mean',CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.4195095863378058,-0.00010082149505615152
393,0.5345170326346548,0.03364148768799068,0.008502483367919922,0.6407708466643619,0.008531162644302662,0.244831657409668,0.3366920209991804,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,False,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",6,KNNImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.22624220007659546,-0.0007918539047241224
394,0.5345170326346548,0.03364148768799068,0.00869946479797363,0.6407708466643619,0.008531162644302662,0.23994274139404295,0.3438170079998599,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",38,KNNImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.21911721307591592,-0.0005948724746704138
395,0.5345170326346548,0.03364148768799068,0.008815526962280273,0.6407708466643619,0.008531162644302662,0.2433602333068848,0.3392596580006284,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",48,KNNImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.22367456307514744,-0.0004788103103637708
396,0.5342687139376501,0.04235341267244402,0.008836936950683594,0.6241307633055821,0.008716179839289741,0.2416525363922119,0.5942034829995464,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",41,IterativeImputer,,CustomTarget,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.2506724282035755,-0.0004574003219604498
397,0.5317229038788924,0.05064422476342335,0.009697341918945312,0.6216203771227689,0.019509750462844085,0.2297628402709961,0.14822499000001702,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",8,SimpleImputer,'mean',Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.4927491963380064,0.0004030046463012679
398,0.1777499727548822,0.03625554340035007,0.0068599700927734365,0.2749844392421605,0.03322128764736559,0.13464856147766113,0.5068783180004175,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",44,IterativeImputer,,Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.3379975932027044,-0.0024343671798706078
399,0.17206549500705828,0.027614834168715758,0.007046842575073242,0.26599625666785764,0.040789629234134685,0.12874913215637207,0.15326887499941222,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",39,SimpleImputer,'median',Ordinal,"PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)",AdaBoost,-0.20790545700053936,-0.0022474946975708024

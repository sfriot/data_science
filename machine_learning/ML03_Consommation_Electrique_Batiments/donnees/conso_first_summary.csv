,loss,valid_score_std,valid_time_mean,train_score_mean,train_score_std,train_time_mean,params_data,params_reg,data_transfo_time,iteration,status,estimator,pca,imputer,strategy,encoder,add_cross,keep_all
5,-0.7579559341075057,0.01255122073785813,0.060494422912597656,0.8542446690807951,0.002071879900118263,0.3222925662994385,"{'data_imputers': AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False)), 'data_encoders__sk_object': CustomOneHotEncoder(ascending=False), 'data_add_features__add_cross': False, 'data_add_features__keep_all': False, 'data_scalers__list_name': <__main__.ListCols object at 0x7f761105d0f0>, 'data_scalers__restrict_cols': 'transfo_num'}","{'estimator': SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False), 'pca': None}",26.045886494000115,10,ok,SVR,Non,MissForest,,CustomOneHotEncoder,False,False
7,-0.7531858392148785,0.027367727007375997,0.10330328941345215,0.9999999999949478,1.503291896831579e-12,0.7000083446502685,"{'data_imputers': AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False)), 'data_encoders__sk_object': LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0), 'data_add_features__add_cross': False, 'data_add_features__keep_all': True, 'data_scalers__list_name': None, 'data_scalers__restrict_cols': None}","{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=2, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",25.603484558999753,18,ok,ExtraTreesRegressor,Non,MissForest,,LeaveOneOutEncoder,False,True
9,-0.7500358086765944,0.035079460049794585,0.003352975845336914,0.8524001111921468,0.004059914674672439,0.17040510177612306,"{'data_imputers': AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform')), 'data_encoders__sk_object': LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0), 'data_add_features__add_cross': False, 'data_add_features__keep_all': True, 'data_scalers__list_name': None, 'data_scalers__restrict_cols': None}","{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
             n_jobs=-1, nthread=None, objective='reg:squarederror',
             random_state=42, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=1), 'pca': None}",0.34829127000011795,32,ok,XGBRegressor,Non,KNNImputer,,LeaveOneOutEncoder,False,True
2,-0.7491007575900468,0.017156309656041643,0.002474260330200195,0.7836398867096432,0.005226261701524641,0.024503755569458007,"{'data_imputers': AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False)), 'data_encoders__sk_object': CustomOneHotEncoder(ascending=False), 'data_add_features__add_cross': False, 'data_add_features__keep_all': False, 'data_scalers__list_name': <__main__.ListCols object at 0x7f761105d0f0>, 'data_scalers__restrict_cols': 'transfo_num'}","{'estimator': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",25.851426258999936,21,ok,Ridge,PCA,MissForest,,CustomOneHotEncoder,False,False
1,-0.748747791965769,0.017009962942810042,0.0024549484252929686,0.7836543585132093,0.005225762996062137,0.028139686584472655,"{'data_imputers': AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False)), 'data_encoders__sk_object': CustomOneHotEncoder(ascending=False), 'data_add_features__add_cross': False, 'data_add_features__keep_all': False, 'data_scalers__list_name': <__main__.ListCols object at 0x7f761105d0f0>, 'data_scalers__restrict_cols': 'transfo_num'}","{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",25.929694793999943,21,ok,LinearRegression,PCA,MissForest,,CustomOneHotEncoder,False,False
6,-0.7469204577870687,0.033033126289571925,0.10337786674499512,0.964874176199878,0.0016352359922748906,1.3248651504516602,"{'data_imputers': AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False)), 'data_encoders__sk_object': LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0), 'data_add_features__add_cross': False, 'data_add_features__keep_all': True, 'data_scalers__list_name': None, 'data_scalers__restrict_cols': None}","{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",25.496342284000093,18,ok,RandomForestRegressor,Non,MissForest,,LeaveOneOutEncoder,False,True
4,-0.6686857870160099,0.026067462684091464,0.10398783683776855,0.7856676296903574,0.004909244730859729,0.006625986099243164,"{'data_imputers': PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False), 'data_encoders__sk_object': LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0), 'data_add_features__add_cross': True, 'data_add_features__keep_all': True, 'data_scalers__list_name': None, 'data_scalers__restrict_cols': None}","{'estimator': KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform'), 'pca': None}",0.6096455279998736,49,ok,KNeighborsRegressor,Non,IterativeImputer,'mean',LeaveOneOutEncoder,True,True
8,-0.655483910050121,0.028667658545058327,0.00943741798400879,0.7226375272980224,0.00924033764576233,0.25092225074768065,"{'data_imputers': PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False), 'data_encoders__sk_object': LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0), 'data_add_features__add_cross': False, 'data_add_features__keep_all': True, 'data_scalers__list_name': None, 'data_scalers__restrict_cols': None}","{'estimator': AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=42), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",0.21975879699948564,5,ok,AdaBoostRegressor,PCA,SimpleImputer,'median',LeaveOneOutEncoder,False,True
3,-0.485156729792279,0.020383665397829417,0.001809978485107422,0.48895176807528073,0.010629817640451006,0.0063670635223388675,"{'data_imputers': AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform')), 'data_encoders__sk_object': LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0), 'data_add_features__add_cross': True, 'data_add_features__keep_all': True, 'data_scalers__list_name': None, 'data_scalers__restrict_cols': None}","{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",0.35718626899983974,3,ok,Lasso,PCA,KNNImputer,,LeaveOneOutEncoder,True,True
0,0.016215320250750363,0.022898270582446048,0.0018470287322998047,-0.010846666055173416,0.0018784266882735105,0.006279659271240234,"{'data_imputers': PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False), 'data_encoders__sk_object': CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64), 'data_add_features__add_cross': False, 'data_add_features__keep_all': True, 'data_scalers__list_name': None, 'data_scalers__restrict_cols': None}","{'estimator': DummyRegressor(constant=None, quantile=None, strategy='median'), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",0.222184091000031,1,ok,DummyRegressor,PCA,SimpleImputer,'mean',CustomTargetEncoder,False,True

,loss,valid_score_std,valid_time_mean,train_score_mean,train_score_std,train_time_mean,params_data,params_reg,data_transfo_time,iteration,status,estimator,pca,imputer,strategy,encoder,add_cross,keep_all
5,-0.5549375343146032,0.04225959777509519,0.103877592086792,0.8829528211516837,0.0035655835785073924,0.5241559982299805,"{'data_imputers': PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False), 'data_encoders__sk_object': LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0), 'data_add_features__add_cross': True, 'data_add_features__keep_all': True, 'data_scalers__list_name': None, 'data_scalers__restrict_cols': None}","{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=12, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",0.2560215880002943,111,ok,ExtraTreesRegressor,Non,SimpleImputer,'mean',LeaveOneOutEncoder,True,True
6,-0.5523565582008719,0.056437777494850724,0.004648876190185547,0.7222885326699503,0.00858312391662515,0.3493646621704102,"{'data_imputers': PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False), 'data_encoders__sk_object': LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0), 'data_add_features__add_cross': True, 'data_add_features__keep_all': True, 'data_scalers__list_name': None, 'data_scalers__restrict_cols': None}","{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.057532743324745866,
             max_delta_step=0, max_depth=3, min_child_weight=1, missing=None,
             n_estimators=175, n_jobs=-1, nthread=None,
             objective='reg:squarederror', random_state=42, reg_alpha=0,
             reg_lambda=1, scale_pos_weight=1, seed=None, silent=None,
             subsample=1, verbosity=1), 'pca': None}",0.258967361998657,157,ok,XGBRegressor,Non,SimpleImputer,'mean',LeaveOneOutEncoder,True,True
4,-0.5438486883398005,0.0464120020115272,0.10343899726867675,0.8630207261654945,0.005002471135892711,1.0692133903503418,"{'data_imputers': PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False), 'data_encoders__sk_object': LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0), 'data_add_features__add_cross': False, 'data_add_features__keep_all': False, 'data_scalers__list_name': None, 'data_scalers__restrict_cols': None}","{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=3,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",0.22175512399917352,154,ok,RandomForestRegressor,Non,SimpleImputer,'mean',LeaveOneOutEncoder,False,False
1,-0.542156843458677,0.05344615567238567,0.0017527103424072265,0.5574620688714214,0.014476108064023684,0.0043604373931884766,"{'data_imputers': PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False), 'data_encoders__sk_object': LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0), 'data_add_features__add_cross': True, 'data_add_features__keep_all': True, 'data_scalers__list_name': None, 'data_scalers__restrict_cols': None}","{'estimator': Ridge(alpha=0.5632866786440176, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': None}",0.26038429999971413,98,ok,Ridge,Non,SimpleImputer,'mean',LeaveOneOutEncoder,True,True
2,-0.5340915860993306,0.051893312163768926,0.001930570602416992,0.5451463036506585,0.01514652680556791,0.009035015106201172,"{'data_imputers': AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform')), 'data_encoders__sk_object': LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0), 'data_add_features__add_cross': True, 'data_add_features__keep_all': True, 'data_scalers__list_name': None, 'data_scalers__restrict_cols': None}","{'estimator': ElasticNet(alpha=0.2007654278372393, copy_X=True, fit_intercept=True,
           l1_ratio=0.00098374448350543, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",0.35714982300123665,68,ok,ElasticNet,PCA,KNNImputer,,LeaveOneOutEncoder,True,True
0,-0.5332990686675018,0.05416804480263606,0.0018954277038574219,0.5472353006528095,0.0146614340397544,0.007825517654418945,"{'data_imputers': PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False), 'data_encoders__sk_object': LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0), 'data_add_features__add_cross': False, 'data_add_features__keep_all': True, 'data_scalers__list_name': None, 'data_scalers__restrict_cols': None}","{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",0.24490005699772155,17,ok,LinearRegression,PCA,SimpleImputer,'mean',LeaveOneOutEncoder,False,True
3,-0.5305238615276794,0.05266296540338393,0.011557674407958985,0.542369128127934,0.01628345398694023,0.12580289840698242,"{'data_imputers': PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False), 'data_encoders__sk_object': LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0), 'data_add_features__add_cross': False, 'data_add_features__keep_all': False, 'data_scalers__list_name': None, 'data_scalers__restrict_cols': None}","{'estimator': SVR(C=0.028016140249015463, cache_size=200, coef0=0.0, degree=3, epsilon=0.1,
    gamma='scale', kernel='linear', max_iter=-1, shrinking=True, tol=0.001,
    verbose=False), 'pca': None}",0.22609145599926705,157,ok,SVR,Non,SimpleImputer,'mean',LeaveOneOutEncoder,False,False

,loss,valid_score_std,valid_time_mean,train_score_mean,train_score_std,train_time_mean,params_data,params_reg,data_transfo_time,iteration,status,estimator,pca,imputer,strategy,encoder,add_cross,keep_all
6,-0.7582331029687641,0.02004074393105011,0.007964181900024413,0.8959517826128238,0.0028679851159507464,1.589573049545288,"{'data_imputers': AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform')), 'data_encoders__sk_object': CustomOneHotEncoder(ascending=False), 'data_add_features__add_cross': False, 'data_add_features__keep_all': False, 'data_scalers__list_name': <__main__.ListCols object at 0x7f761105d0f0>, 'data_scalers__restrict_cols': 'transfo_num'}","{'estimator': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.07027482546890726,
             max_delta_step=0, max_depth=3, min_child_weight=1, missing=None,
             n_estimators=375, n_jobs=-1, nthread=None,
             objective='reg:squarederror', random_state=42, reg_alpha=0,
             reg_lambda=1, scale_pos_weight=1, seed=None, silent=None,
             subsample=1, verbosity=1), 'pca': None}",0.6874882470001467,69,ok,XGBRegressor,Non,KNNImputer,,CustomOneHotEncoder,False,False
3,-0.7566036735416104,0.010482762955816696,0.05783743858337402,0.873061424525399,0.002162105053071938,0.34421863555908205,"{'data_imputers': AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform')), 'data_encoders__sk_object': CustomOneHotEncoder(ascending=False), 'data_add_features__add_cross': False, 'data_add_features__keep_all': False, 'data_scalers__list_name': <__main__.ListCols object at 0x7f761105d0f0>, 'data_scalers__restrict_cols': 'transfo_num'}","{'estimator': SVR(C=1.4973185678679177, cache_size=200, coef0=0.0, degree=3, epsilon=0.1,
    gamma='scale', kernel='rbf', max_iter=-1, shrinking=True, tol=0.001,
    verbose=False), 'pca': None}",0.7075617610007612,153,ok,SVR,Non,KNNImputer,,CustomOneHotEncoder,False,False
5,-0.7554540650572321,0.028383547579891335,0.10378384590148926,0.9178533700568116,0.0032885863187858844,0.42363848686218264,"{'data_imputers': PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False), 'data_encoders__sk_object': LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0), 'data_add_features__add_cross': False, 'data_add_features__keep_all': False, 'data_scalers__list_name': None, 'data_scalers__restrict_cols': None}","{'estimator': ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',
                    max_depth=None, max_features='auto', max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_impurity_split=None, min_samples_leaf=1,
                    min_samples_split=14, min_weight_fraction_leaf=0.0,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=42, verbose=0, warm_start=False), 'pca': None}",0.21918508599992492,40,ok,ExtraTreesRegressor,Non,SimpleImputer,'mean',LeaveOneOutEncoder,False,False
1,-0.7497725039727554,0.01808086751508507,0.0017017364501953126,0.7972698415499087,0.006391754915018424,0.007833623886108398,"{'data_imputers': PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False), 'data_encoders__sk_object': CustomOneHotEncoder(ascending=False), 'data_add_features__add_cross': False, 'data_add_features__keep_all': False, 'data_scalers__list_name': <__main__.ListCols object at 0x7f761105d0f0>, 'data_scalers__restrict_cols': 'transfo_num'}","{'estimator': Ridge(alpha=1.7603290408997045, copy_X=True, fit_intercept=True, max_iter=None,
      normalize=False, random_state=42, solver='auto', tol=0.001), 'pca': None}",0.5646329820001483,76,ok,Ridge,Non,SimpleImputer,'mean',CustomOneHotEncoder,False,False
0,-0.7407734597470673,0.018169661192269607,0.0024947166442871095,0.776210523913855,0.005741815400996807,0.026910114288330077,"{'data_imputers': PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False), 'data_encoders__sk_object': CustomOneHotEncoder(ascending=False), 'data_add_features__add_cross': False, 'data_add_features__keep_all': False, 'data_scalers__list_name': <__main__.ListCols object at 0x7f761105d0f0>, 'data_scalers__restrict_cols': 'transfo_num'}","{'estimator': LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",0.5724298309996811,8,ok,LinearRegression,PCA,SimpleImputer,'median',CustomOneHotEncoder,False,False
4,-0.7401465917354377,0.02747291825885829,0.10339770317077637,0.9324509224258335,0.003415778016536713,1.0687618732452393,"{'data_imputers': PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False), 'data_encoders__sk_object': LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0), 'data_add_features__add_cross': False, 'data_add_features__keep_all': True, 'data_scalers__list_name': None, 'data_scalers__restrict_cols': None}","{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=8, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",0.22260564899988822,127,ok,RandomForestRegressor,Non,SimpleImputer,'mean',LeaveOneOutEncoder,False,True
2,-0.724175278191467,0.03741824256766762,0.0017364501953125,0.7278536473689743,0.010301981941109064,0.005139780044555664,"{'data_imputers': AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform')), 'data_encoders__sk_object': LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0), 'data_add_features__add_cross': False, 'data_add_features__keep_all': True, 'data_scalers__list_name': None, 'data_scalers__restrict_cols': None}","{'estimator': ElasticNet(alpha=0.207268851630116, copy_X=True, fit_intercept=True,
           l1_ratio=0.2188615858644753, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",0.33724670999981754,200,ok,ElasticNet,Non,KNNImputer,,LeaveOneOutEncoder,False,True

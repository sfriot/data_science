valid_score_mean,valid_score_std,valid_time_mean,train_score_mean,train_score_std,train_time_mean,data_transfo_time,data_imputers,data_encoders,add_cross,keep_all,restrict_scaler,params_reg,iteration
0.6164185889536821,0.03238510139257129,0.10376787185668945,0.9473268922965715,0.001843795435724836,1.2515349864959717,0.22908956999981456,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",1
0.7124141278570634,0.01124528371193937,0.10697026252746582,0.9603355696873592,0.0013324100047035587,5.3766679763793945,0.5740028879999954,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",2
0.7186923892837689,0.03200909905134496,0.10348811149597167,0.960596800022832,0.0009076130501859584,1.695467233657837,0.36052422100010517,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",3
0.6905130077233557,0.029089085008325175,0.10296225547790527,0.958240376736574,0.0013849689741390204,1.3271299839019775,0.5105057959999613,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",4
0.7155247211769618,0.0355803817072441,0.10386366844177246,0.9596447006401094,0.0011677889568791112,1.3300391674041747,0.23377000100026635,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",5
0.6287225585726637,0.027706174843492238,0.10333137512207032,0.9496036065928071,0.0016607239803028975,1.2501943588256836,0.3362431830000787,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",6
0.6420438122815756,0.03682165680556016,0.10336360931396485,0.9524386825335027,0.0020358981886491245,1.1501441955566407,0.23016573899985815,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",7
0.6788720076710656,0.026596867725165903,0.10372214317321778,0.9546850096985915,0.001785782665102346,1.1495938301086426,0.1494635100002597,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",8
0.6802467035064791,0.023722243494846987,0.1097914695739746,0.9566065179987676,0.001624343024315849,1.2698315620422362,0.5908203499998308,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",9
0.7225727395843553,0.030550580216539676,0.10404434204101562,0.9625485197695802,0.0015170193080109476,1.907598066329956,26.057722472000023,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",10
0.6678603298671456,0.02321194258639047,0.10496530532836915,0.954500688630198,0.00102791897567765,2.2384764194488525,2.2763861389998965,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",11
0.696333738838985,0.030194313721690416,0.10773887634277343,0.958551796898736,0.001456277441703503,1.450108575820923,1.789466577999974,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",12
0.5989480254231887,0.0247771337528235,0.10386877059936524,0.9447667026286025,0.000895053109376386,1.1337077140808105,0.6108657800000401,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",13
0.7089008139816964,0.0281287263322326,0.10335335731506348,0.9608483757032943,0.001550141753468264,1.9827608108520507,0.9347679140000764,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",14
0.696333738838985,0.030194313721690368,0.10344119071960449,0.958551796898736,0.001456277441703503,1.4836451053619384,1.9017659269998148,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",15
0.6934960091197006,0.03248898119271751,0.10348091125488282,0.9580000132335484,0.001406287059689577,1.3287153720855713,25.52322997300007,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",16
0.710230973053539,0.03680896086810658,0.10894918441772461,0.9601298188964176,0.000848733953993079,1.6505044937133788,0.22159080900019035,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",17
0.7469204577870687,0.033033126289571925,0.10337786674499512,0.964874176199878,0.0016352359922748906,1.3248651504516602,25.496342284000093,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",18
0.6920596561614347,0.027452685428916865,0.10685858726501465,0.9583307135268981,0.0016977983819739027,1.259676456451416,0.22834462199989503,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",19
0.6949204245798657,0.030796375816284288,0.1082315444946289,0.9583651128441476,0.001226305774497512,1.4486131191253662,1.9161409880002793,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",20
0.7225727395843553,0.030550580216539676,0.10454268455505371,0.9625485197695802,0.0015170193080109476,1.9560083866119384,25.934305611000127,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",21
0.7225727395843553,0.030550580216539676,0.10716691017150878,0.9625485197695802,0.0015170193080109476,1.9613349914550782,26.062146619000032,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",22
0.7225727395843553,0.030550580216539676,0.10690851211547851,0.9625485197695802,0.0015170193080109476,1.9586053371429444,25.93418171200028,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",23
0.7469204577870687,0.03303312628957194,0.10330338478088379,0.964874176199878,0.0016352359922748906,1.3303720474243164,25.479125476000263,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",24
0.7469204577870687,0.03303312628957194,0.10380110740661622,0.964874176199878,0.0016352359922748906,1.3313226699829102,25.690840253999795,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",25
0.7469204577870687,0.0330331262895719,0.10345954895019531,0.964874176199878,0.0016352359922748906,1.3297685146331788,25.51616624799999,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",26
0.7140907889743267,0.029330651454483186,0.10381026268005371,0.9602450032224876,0.0011739425954091546,1.3323934555053711,25.69893338699967,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",27
0.7469204577870687,0.0330331262895719,0.10331306457519532,0.964874176199878,0.0016352359922748906,1.3288898944854737,25.578390900999693,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",28
0.7140907889743267,0.029330651454483138,0.1039151668548584,0.9602450032224876,0.0011739425954091546,1.3308424472808837,25.507686666000154,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",29
0.6431336774696023,0.04060346753114686,0.10340404510498047,0.9517331400855721,0.001993180169927397,1.1519891262054442,0.2304140829996868,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",30
0.7165026548920211,0.02683673917298487,0.1065798282623291,0.960184449769242,0.0015906715963678198,1.6763306140899659,25.597098777000156,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",31
0.7314232752078208,0.02840612839059101,0.10373172760009766,0.9639173196643502,0.001254732943729085,1.32881817817688,0.3330299129997911,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",32
0.7165026548920211,0.02683673917298486,0.10713915824890137,0.960184449769242,0.0015906715963678198,1.6738874435424804,25.566832196999712,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",33
0.614430812019495,0.02976241048445514,0.10396537780761719,0.9474656130430574,0.001489165153908541,1.1506471633911133,0.22862352499987537,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",34
0.7314232752078208,0.028406128390590996,0.10679001808166504,0.9639173196643502,0.001254732943729085,1.3094419956207275,0.33426753899993855,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",35
0.7140907889743267,0.029330651454483186,0.10400967597961426,0.9602450032224876,0.0011739425954091546,1.3329969882965087,25.675766209999892,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",36
0.7102309730535388,0.03680896086810654,0.10340194702148438,0.9601298188964176,0.000848733953993079,1.6943912982940674,0.21341093599994565,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",37
0.6498045066038707,0.03882919099638281,0.10521097183227539,0.9522234471228407,0.001248272215016425,1.1481480121612548,25.579258646999733,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",38
0.7314232752078207,0.028406128390591017,0.10330133438110352,0.9639173196643502,0.001254732943729085,1.3288658142089844,0.3331139100000655,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",39
0.7326292611598703,0.028115346624732956,0.10495176315307617,0.9630139271702024,0.0012416070760437013,1.3145620822906494,0.6207736439996552,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",40
0.6231031799947232,0.025970952951292543,0.10421042442321778,0.9501314584705283,0.0010633253536681926,1.6123152256011963,25.57690890599997,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",41
0.6099772238398895,0.039724886969140547,0.10364046096801757,0.9486674299687639,0.0012108234208033357,1.1497182369232177,0.2409797699997398,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",42
0.6934960091197006,0.03248898119271745,0.10620503425598145,0.9580000132335484,0.001406287059689577,1.2716397762298584,25.61472388400034,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",43
0.7326292611598703,0.02811534662473299,0.10329632759094239,0.9630139271702024,0.0012416070760437013,1.3276362895965577,0.5875706589999936,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",44
0.7109793297730868,0.03411229961798068,0.10649223327636718,0.9593949759632221,0.0009754495428505837,1.679338550567627,0.24545674899991354,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",45
0.7390501345466148,0.02664904648686514,0.1082536220550537,0.9642084347769474,0.001986322156024669,1.2763923168182374,0.22343254299994442,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",46
0.47945838952996667,0.05058597033598094,0.10375432968139649,0.9284214347601688,0.0022615055297405093,0.7079041957855224,0.26665084999967803,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",47
0.6934960091197006,0.03248898119271748,0.10566325187683105,0.9580000132335484,0.001406287059689577,1.3156027793884277,25.470272731000023,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",48
0.7274926792272868,0.03162383368868888,0.10325078964233399,0.9630526771998029,0.001410656497956474,1.609381628036499,0.6012689280000814,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",49
0.6730389783172341,0.024016863165132265,0.10354022979736328,0.9542212038119768,0.0018521595743809967,1.1496403694152832,25.40358920000017,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",50

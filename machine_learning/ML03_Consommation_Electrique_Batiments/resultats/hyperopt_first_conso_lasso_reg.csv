valid_score_mean,valid_score_std,valid_time_mean,train_score_mean,train_score_std,train_time_mean,data_transfo_time,data_imputers,data_encoders,add_cross,keep_all,restrict_scaler,params_reg,iteration
0.33474744095633596,0.009632878254584478,0.0017631053924560547,0.33914716499936387,0.010313336226393128,0.006794357299804687,0.22498288399992816,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",1
0.3384319784673221,0.004667653723214417,0.0025130271911621093,0.34261378451591884,0.008950242411176371,0.023828744888305664,0.579116274999933,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",2
0.485156729792279,0.020383665397829417,0.001809978485107422,0.48895176807528073,0.010629817640451006,0.0063670635223388675,0.35718626899983974,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",3
0.022771630958642496,0.005502599822355583,0.0015612602233886718,0.0271242402463322,0.0013247141325425714,0.003899669647216797,0.5034453139999187,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",4
0.4443537898131266,0.017331609144334053,0.0019387245178222657,0.4490385552721894,0.012175556250051772,0.007295989990234375,0.22079330700012179,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",5
0.3356310681649838,0.00844797217047405,0.0017334938049316407,0.3399384216785542,0.008968482411898925,0.007171630859375,0.33764639099990745,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,False,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",6
-0.00448494354183957,0.006394895638666015,0.0016508102416992188,0.00015622011847047368,0.00031244023694094737,0.005139064788818359,0.2245194030001585,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",7
0.3293227783351154,0.01091211534374928,0.0020093917846679688,0.33310118211213274,0.011451486524356002,0.005761432647705078,0.14443620700012616,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",8
-0.0046433486934646774,0.006329163950182477,0.0016553878784179687,0.0,0.0,0.004229307174682617,0.5890597850000177,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",9
-0.0046433486934646774,0.006329163950182477,0.0018068313598632812,0.0,0.0,0.006694126129150391,25.97404679200008,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",10
0.376773999627381,0.011572683826947903,0.002591514587402344,0.38025071209983646,0.008712575359112809,0.009718561172485351,2.117671058999804,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",11
-0.0046433486934646774,0.006329163950182477,0.0016533374786376954,0.0,0.0,0.005019044876098633,1.914473745000123,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",12
0.35244448476154416,0.008734597874129828,0.0017406940460205078,0.3568695803139824,0.008424227718840991,0.005919790267944336,0.5887691579998773,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,False,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",13
-0.0046433486934646774,0.006329163950182477,0.0017786026000976562,0.0,0.0,0.006304359436035157,0.9310989539999355,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",14
-0.0046433486934646774,0.006329163950182477,0.0016258716583251952,0.0,0.0,0.004189300537109375,1.7881294660001004,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",15
-0.0046433486934646774,0.006329163950182477,0.001705503463745117,0.0,0.0,0.0038724422454833986,25.589201423000077,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",16
0.4443537898131266,0.017331609144334053,0.0017730236053466798,0.4490385552721894,0.012175556250051772,0.007449817657470703,0.22069294600009925,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",17
-0.0046433486934646774,0.006329163950182477,0.0016247749328613282,0.0,0.0,0.00424346923828125,25.488285563999852,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",18
-0.0046433486934646774,0.006329163950182477,0.0014136791229248046,0.0,0.0,0.0038668632507324217,0.2168180690000554,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",19
-0.0046433486934646774,0.006329163950182477,0.0019155502319335937,0.0,0.0,0.005275297164916992,1.8807594840000093,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",20
0.47841211981362636,0.019184889725225886,0.0018666744232177734,0.48224406749160914,0.011308146938131636,0.007961893081665039,0.24825925000004645,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",21
0.485156729792279,0.020383665397829417,0.0018668651580810546,0.48895176807528073,0.010629817640451006,0.008305978775024415,0.36080294899988985,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",22
0.485156729792279,0.020383665397829417,0.0017698287963867187,0.48895176807528073,0.010629817640451006,0.007121372222900391,0.35544186399988575,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",23
0.485156729792279,0.020383665397829417,0.0019277572631835938,0.48895176807528073,0.010629817640451006,0.007710790634155274,0.35029276299997036,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",24
0.485156729792279,0.020383665397829417,0.0018469333648681641,0.48895176807528073,0.010629817640451006,0.007871866226196289,0.35857593800005816,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",25
0.485156729792279,0.020383665397829417,0.0018697261810302734,0.48895176807528073,0.010629817640451006,0.007609033584594726,0.3505197550000503,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",26
0.3878189538763978,0.012884914932666768,0.0017577648162841798,0.393549012888747,0.009420364146984212,0.005946922302246094,0.35237555599996995,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",27
0.485156729792279,0.020383665397829417,0.0018152236938476563,0.48895176807528073,0.010629817640451006,0.007590484619140625,0.3504548270000214,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",28
0.485156729792279,0.020383665397829417,0.003294229507446289,0.48895176807528073,0.010629817640451006,0.007237482070922852,0.35934581999981674,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",29
0.485156729792279,0.020383665397829417,0.0018789291381835938,0.48895176807528073,0.010629817640451006,0.006515216827392578,0.3617911900000763,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",30
0.3878189538763978,0.012884914932666768,0.0017737865447998047,0.393549012888747,0.009420364146984212,0.006096982955932617,0.35107495000011113,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",31
0.485156729792279,0.020383665397829417,0.0018314838409423829,0.48895176807528073,0.010629817640451006,0.00819087028503418,0.36198770999999397,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",32
0.47841211981362636,0.019184889725225886,0.0018672943115234375,0.48224406749160914,0.011308146938131636,0.006561136245727539,0.24516043599987825,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",33
0.485156729792279,0.020383665397829417,0.0018956184387207032,0.48895176807528073,0.010629817640451006,0.007856225967407227,0.36576643299986245,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",34
0.3930785676663658,0.013865039311265568,0.0019117832183837891,0.3988665636940386,0.009975324595589006,0.005722665786743164,25.695765933999837,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",35
0.485156729792279,0.020383665397829417,0.0018130779266357423,0.48895176807528073,0.010629817640451006,0.009680747985839844,0.35661354300009407,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",36
0.47841211981362636,0.019184889725225886,0.002687692642211914,0.48224406749160914,0.011308146938131636,0.006881570816040039,0.24058771700015313,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",37
0.37475391715470374,0.01050302846637096,0.0018353462219238281,0.3784843056135757,0.008260784200993035,0.007083082199096679,0.36099600099987583,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",38
0.3347761189135602,0.010029263846308008,0.0039041996002197265,0.3380889104309526,0.011733856771555098,0.007552242279052735,25.59193660699998,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",39
0.3878189538763978,0.012884914932666768,0.00174713134765625,0.393549012888747,0.009420364146984212,0.006293344497680664,0.3594407890000184,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",40
0.37907566236938595,0.012518611689472773,0.0017002582550048827,0.3827563101665071,0.009392837227456386,0.005724716186523438,0.608251854999935,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",41
0.3384319784673221,0.004667653723214417,0.0024948596954345705,0.34261378451591884,0.008950242411176371,0.024960088729858398,0.5701799050000318,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",42
0.485156729792279,0.020383665397829417,0.001862478256225586,0.48895176807528073,0.010629817640451006,0.007628345489501953,0.3585785279999527,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",43
0.02592531593105296,0.005492618352357387,0.0015956401824951173,0.030909720518858895,0.0008012268734529057,0.005285882949829101,0.5019264779998593,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",44
0.4443537898131266,0.017331609144334053,0.0017897605895996094,0.4490385552721894,0.012175556250051772,0.0071125030517578125,0.22644029699995372,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",45
0.3901337737570653,0.013789980309457373,0.0017577648162841798,0.39604717344878526,0.010469902333984035,0.0063801765441894535,0.22269842900004733,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",46
0.3408838888339366,0.004291584288670009,0.002401256561279297,0.34504435750943785,0.00901144851170272,0.02250018119812012,25.92710500599992,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",47
0.37475391715470374,0.01050302846637096,0.002052593231201172,0.3784843056135757,0.008260784200993035,0.008894062042236328,0.36309653199987224,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",48
0.4494610503131112,0.018981244389985243,0.0018188953399658203,0.45412075257521495,0.012407332278569003,0.0072192192077636715,0.6159508480000113,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",49
0.025367506035765076,0.005569043527231111,0.0017222881317138672,0.029862527601145984,0.001736959186885775,0.004334306716918946,0.26278136399992036,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize=False, positive=False, precompute=False, random_state=42,
      selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",50

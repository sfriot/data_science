valid_score_mean,valid_score_std,valid_time_mean,train_score_mean,train_score_std,train_time_mean,data_transfo_time,data_imputers,data_encoders,add_cross,keep_all,restrict_scaler,params_reg,iteration
0.38399086360644324,0.03975247820332811,0.10366582870483398,0.9156359777341679,0.002231614468299288,1.2562488079071046,0.2287666550000722,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",1
0.4873916581691372,0.03403676347442161,0.11188850402832032,0.930820811070291,0.0018411155775532786,5.442973709106445,0.5850892519993067,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",2
0.5181391144230126,0.040445249453920896,0.10388588905334473,0.9313676902086808,0.0014675050887996107,1.6947625160217286,0.35323266699924716,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",3
0.462182091475939,0.051158368367616586,0.10361113548278808,0.9286740925097089,0.0014285609051680058,1.3473006725311278,0.5305986240018683,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",4
0.5075966566974621,0.04841434221918008,0.10409550666809082,0.9298603684216857,0.0012696744537065326,1.3321608066558839,0.22075321200100007,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",5
0.3836906334239292,0.06495976642123598,0.10357003211975098,0.9175966641097176,0.0029092750562098456,1.2550076007843018,0.3375604459979513,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",6
0.48781081960333383,0.048777601691119984,0.10366840362548828,0.929990738916128,0.0019463528606829576,1.1482016086578368,0.23565398199934862,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",7
0.4494791469058021,0.054721912799022665,0.10332584381103516,0.9237831439304445,0.00213375134845458,1.1497842788696289,0.14534165599980042,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",8
0.4466261274114524,0.047030347378392026,0.1054272174835205,0.9272902394308178,0.0020432171701868273,1.368659210205078,0.5829076979971433,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",9
0.5055863353952402,0.04972019262707681,0.1038083553314209,0.9342757676169601,0.001943954639064639,1.9785261631011963,26.067737428998953,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",10
0.4420326400883183,0.05361551238435848,0.10390362739562989,0.9242401416017308,0.0023535678557343722,2.2368388175964355,2.3976851660008833,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",11
0.4527569062842304,0.053357280523262884,0.10344290733337402,0.9281433200477786,0.0020114885822229115,1.510539722442627,1.8746420879979269,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",12
0.35750913777180304,0.048159748487291015,0.10420694351196289,0.9121531692385891,0.003010700402843471,1.1896308422088624,0.6173827390011866,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",True,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",13
0.4867743712456192,0.0473634756242716,0.10458121299743653,0.9328820301205155,0.0022095755094764294,1.97521071434021,0.9425167879999208,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",14
0.4527569062842304,0.053357280523262884,0.10478196144104004,0.9281433200477786,0.0020114885822229028,1.5096659660339355,1.8674303840016364,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",15
0.46880118671637394,0.050441357328117054,0.10323967933654785,0.9288726491778208,0.0013213056786891095,1.3342562675476075,25.513076399001875,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",16
0.5140982283675222,0.05049073774067006,0.10646939277648926,0.9318664491763482,0.0020473198729202796,1.650571918487549,0.2259850619993813,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",17
0.5428342367199622,0.05525274307694042,0.10317430496215821,0.9375774177147642,0.0013496370945219143,1.3248863220214844,25.605290044997673,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",18
0.4607335991623307,0.048829479381975856,0.10395998954772949,0.9296918950298675,0.001276870161345439,1.330552339553833,0.227663030000258,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",19
0.458479388921492,0.045917807137184304,0.1036590576171875,0.92758207240354,0.0017488380091039862,1.5087314605712892,2.1102474440012884,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",20
0.5181391144230126,0.04044524945392089,0.103480863571167,0.9313676902086808,0.0014675050887996107,1.6919503211975098,0.3614811480001663,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",21
0.5260928681634899,0.040509010158616354,0.10348992347717285,0.9325733465968022,0.0014518047345514777,1.7114988327026368,25.51023705300031,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",22
0.5260928681634899,0.04050901015861637,0.10448436737060547,0.9325733465968022,0.0014518047345514777,1.696319818496704,25.62615267699948,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",23
0.5260928681634899,0.040509010158616354,0.10410408973693848,0.9325733465968022,0.0014518047345514777,1.6936758518218995,25.522478177001176,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",24
0.5260928681634899,0.040509010158616354,0.1034773349761963,0.9325733465968022,0.0014518047345514777,1.6926748275756835,25.61329775700142,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",25
0.5260928681634899,0.04050901015861634,0.10410885810852051,0.9325733465968022,0.0014518047345514777,1.6911091327667236,25.629949595000653,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",26
0.5168376148810399,0.0484624931035835,0.10404276847839355,0.9323852968610907,0.002224194497490651,1.336597776412964,25.60104226399926,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",27
0.5379013324611465,0.049216011020188,0.10321054458618165,0.9364331873746423,0.0013565998402794753,1.6084004878997802,25.618978802001948,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",28
0.5428342367199623,0.05525274307694043,0.10361304283142089,0.9375774177147642,0.0013496370945219143,1.3305847644805908,25.60346508299699,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",29
0.5318592524397772,0.05052692402920925,0.10374627113342286,0.9372297458388654,0.0018084577846127021,1.3301936626434325,0.22527048399933847,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",30
0.5428342367199623,0.05525274307694043,0.10353598594665528,0.9375774177147642,0.0013496370945219143,1.328178882598877,25.609418802003347,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",31
0.5428342367199622,0.05525274307694042,0.10319781303405762,0.9375774177147642,0.0013496370945218932,1.333914041519165,25.5876604269979,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",32
0.5428342367199622,0.05525274307694042,0.10329461097717285,0.9375774177147642,0.0013496370945219143,1.330014181137085,25.57906477099823,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",33
0.5075966566974621,0.04841434221918007,0.10397357940673828,0.9298603684216857,0.0012696744537065026,1.3321397304534912,0.22435274300005403,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",34
0.5338500626006308,0.057638185680399155,0.10403118133544922,0.9369089659665205,0.0022371303535457083,1.3384445190429688,0.32966930800103,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",35
0.5168376148810399,0.048462493103583464,0.10405163764953614,0.9323852968610907,0.002224194497490651,1.3267284870147704,25.604718744998536,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",36
0.5318592524397772,0.05052692402920928,0.10373497009277344,0.9372297458388654,0.0018084577846127021,1.330442237854004,0.22054962499896646,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",37
0.46880118671637394,0.05044135732811713,0.10361275672912598,0.9288726491778208,0.0013213056786891095,1.3275814533233643,25.519215053998778,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",38
0.4778468266459578,0.047217441633546256,0.10337400436401367,0.9312312695070017,0.002012836984519069,1.3281288146972656,0.26584914900013246,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",39
0.5141312470551294,0.0430183178509255,0.10367383956909179,0.9308817232874818,0.002211745522488256,1.3307602882385254,0.5881905960013682,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",40
0.46880118671637394,0.05044135732811707,0.10335779190063477,0.9288726491778208,0.0013213056786891095,1.3286940097808837,25.509443335999094,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",41
0.5011552561475082,0.05023667074213098,0.10348987579345703,0.9338897071329478,0.002289576055621944,1.976067304611206,0.5700379079971754,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",42
0.5428342367199623,0.05525274307694043,0.10352444648742676,0.9375774177147642,0.0013496370945219143,1.3310181140899657,25.627263042002596,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",43
0.3288000749942224,0.040272186915152636,0.10384941101074219,0.9037899460681244,0.0036769217658108536,0.7096703052520752,0.5333428869998897,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","OrdinalEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, handle_missing='value',
               handle_unknown='value',
               mapping=[{'col': 'BuildingType', 'data_type': dtype('O'),
                         'mapping': NonResidential        1
Nonresidential COS    2
SPS-District K-12     3
Campus                4
NaN                  -2
dtype: int64}...
Multifamily Housing                                     21
Bank Branch                                             22
Laboratory                                              23
Other - Recreation                                      24
Personal Services (Health/Beauty, Dry Cleaning, etc)    25
Self-Storage Facility                                   26
Refrigerated Warehouse                                  27
Manufacturing/Industrial Plant                          28
Fast Food Restaurant                                    29
Supermarket/Grocery Store                               30
Enclosed Mall                                           31
Residence Hall/Dormitory                                32
Convenience Store without Gas Station                   33
Bar/Nightclub                                           34
NaN                                                     -2
dtype: int64}],
               return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",44
0.5318592524397772,0.05052692402920927,0.10393128395080567,0.9372297458388654,0.0018084577846127021,1.328667402267456,0.23720160200173268,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",45
0.5395541322188271,0.04847229676815372,0.1034912109375,0.9373619928201521,0.0016786840364984828,1.330791711807251,0.22148777800248354,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",46
0.5100760429646403,0.0454546164441663,0.1034691333770752,0.9346023705151285,0.00298824317311223,1.974898386001587,0.6830142629987677,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",47
0.3898687884962252,0.04410563712157204,0.10365228652954102,0.9177370628168923,0.0023799538781963518,1.2951105117797852,28.883686545999808,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","CustomTargetEncoder(encoder=TargetEncoder(cols=['BuildingType',
                                                'PrimaryPropertyType',
                                                'LargestPropertyUseType',
                                                'SecondLargestPropertyUseType',
                                                'ThirdLargestPropertyUseType'],
                                          drop_invariant=False,
                                          handle_missing='value',
                                          handle_unknown='value',
                                          min_samples_leaf=1, return_df=True,
                                          smoothing=1.0, verbose=0),
                    target_values=2015_1        12.0
2015_2        11.0
2015_3        41.0
2015_5        10.0
2015_9         2.0
              ... 
2015_49946     8.0
2015_49998     4.0
2015_50008     6.0
2015_50013     4.0
2015_50038     2.0
Name: NumberofFloors, Length: 1509, dtype: float64)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",48
0.5302909855988338,0.04815592772128453,0.1033864974975586,0.9358913581122131,0.001252388009803846,1.3292503356933594,0.6072411669993016,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",49
0.4647605404153793,0.0510700189239093,0.10376625061035157,0.9279819989683162,0.0015118184807041786,1.5109586715698242,27.613141693000216,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=True,
              sk_object=MissForest(bootstrap=True, class_weight=None, copy=True,
                                   criterion=('mse', 'gini'), decreasing=False,
                                   max_depth=None, max_features='auto',
                                   max_iter=10, max_leaf_nodes=None,
                                   min_impurity_decrease=0.0,
                                   min_samples_leaf=1, min_samples_split=2,
                                   min_weight_fraction_leaf=0.0,
                                   missing_values=nan, n_estimators=100,
                                   n_jobs=-1, oob_score=False, random_state=42,
                                   verbose=0, warm_start=False))","HashingEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                     'LargestPropertyUseType', 'SecondLargestPropertyUseType',
                     'ThirdLargestPropertyUseType'],
               drop_invariant=False, hash_method='md5', max_process=1,
               max_sample=1509, n_components=20, return_df=True, verbose=0)",False,False,transfo_num,"{'estimator': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=42, verbose=0, warm_start=False), 'pca': None}",50

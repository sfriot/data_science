valid_score_mean,valid_score_std,valid_time_mean,train_score_mean,train_score_std,train_time_mean,data_transfo_time,data_imputers,data_encoders,add_cross,keep_all,restrict_scaler,params_reg,iteration
0.643132149136582,0.029445374232300054,0.0019269466400146484,0.6481780399994539,0.010924083130528704,0.008161306381225586,0.25292887199975667,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': ElasticNet(alpha=0.7111156016636277, copy_X=True, fit_intercept=True,
           l1_ratio=0.14836193496459738, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",1
0.4592538182354128,0.009383857857362373,0.0023280620574951173,0.4627233939829142,0.00806182617929533,0.024009847640991212,0.9407453270005135,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.726820568034644, copy_X=True, fit_intercept=True,
           l1_ratio=0.6010972613671849, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",2
0.4025160579109608,0.006455750073841238,0.0023363113403320314,0.40620843767067594,0.0072276208430674775,0.022902536392211913,0.947206188000564,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.1614148968604077, copy_X=True, fit_intercept=True,
           l1_ratio=0.5360179981836324, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",3
0.6800012303817826,0.029453946666328775,0.0017406940460205078,0.6882232228853729,0.007373067660464655,0.007597875595092773,0.5939193699996395,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.23349702874818803, copy_X=True, fit_intercept=True,
           l1_ratio=0.141592643549461, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",4
0.18966293103041404,0.00990969012193372,0.002243661880493164,0.19423539931716613,0.010021250356738912,0.02376728057861328,0.6118421299997863,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.769148347410736, copy_X=True, fit_intercept=True,
           l1_ratio=0.7936397356679407, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",5
0.5046321443607373,0.023824660113764728,0.001851940155029297,0.5090062107590858,0.01119626732519436,0.007146072387695312,0.21873694300029456,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=1.3451412193712526, copy_X=True, fit_intercept=True,
           l1_ratio=0.3470954257102995, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",6
-0.0046433486934646774,0.006329163950182477,0.0017261028289794922,0.0,0.0,0.006195878982543946,0.6122873889999028,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.482170166831318, copy_X=True, fit_intercept=True,
           l1_ratio=0.8623661170852909, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",7
0.448775728796726,0.01815232132050833,0.001789236068725586,0.45339595614516837,0.011459904133019878,0.0068451881408691405,0.22570990300027916,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=1.5989204725351323, copy_X=True, fit_intercept=True,
           l1_ratio=0.493878370339903, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",8
0.5372064335520936,0.02627110586966262,0.001462554931640625,0.5404808757082018,0.010969404688054782,0.004158210754394531,0.33809536199987633,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=1.5402502992968425, copy_X=True, fit_intercept=True,
           l1_ratio=0.13362394958741386, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",9
0.46994169033141997,0.024263632787826485,0.0015968799591064454,0.47347563575827073,0.012743743212772756,0.003992938995361328,0.2345220179995522,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=0.8653137401271256, copy_X=True, fit_intercept=True,
           l1_ratio=0.4765336565719652, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",10
0.5754965617187663,0.02845700857143115,0.0019731521606445312,0.5787193975467957,0.0096572240546462,0.007969999313354492,0.6117985680002676,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': ElasticNet(alpha=0.6072868125824717, copy_X=True, fit_intercept=True,
           l1_ratio=0.5916735590832681, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",11
0.49042101739324473,0.025174632151856505,0.002061796188354492,0.4935856624210954,0.01203326121086131,0.005121803283691407,0.60775160600042,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': ElasticNet(alpha=1.0200955201445294, copy_X=True, fit_intercept=True,
           l1_ratio=0.38298592983545, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",12
0.4944422441680475,0.012233580623888077,0.0024862766265869142,0.4975887094270669,0.007533105166810388,0.02395625114440918,0.5703716299994994,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.6202381528435477, copy_X=True, fit_intercept=True,
           l1_ratio=0.4957285024766487, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",13
0.4275915951521364,0.021448683960756245,0.0017743110656738281,0.43020445116193234,0.009673144134470332,0.0076023578643798825,0.574517564999951,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.561387114225355, copy_X=True, fit_intercept=True,
           l1_ratio=0.8022664041309284, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",14
0.5141277645141317,0.02648458359892726,0.001462268829345703,0.5170684486606809,0.011473891370800852,0.0042345523834228516,0.24281595999946148,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': ElasticNet(alpha=0.9889055684401213, copy_X=True, fit_intercept=True,
           l1_ratio=0.35642687917487115, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",15
0.6072339102225239,0.031234414124158564,0.0021820545196533205,0.6100359988797559,0.010100176419297096,0.004134559631347656,0.2500931839995246,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': ElasticNet(alpha=1.3750015030190987, copy_X=True, fit_intercept=True,
           l1_ratio=0.10382932156331837, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",16
0.5884762196622614,0.02327252968373196,0.002848243713378906,0.592556469996774,0.00796968891697923,0.025764846801757814,0.5925130169998738,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.8048765409114809, copy_X=True, fit_intercept=True,
           l1_ratio=0.09273953828737624, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",17
0.5822715386546515,0.02923844372850321,0.0021412849426269533,0.5857773312460951,0.009542289847857877,0.010434198379516601,0.6873758330002602,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.3970944740827193, copy_X=True, fit_intercept=True,
           l1_ratio=0.4020586139041119, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",18
0.46113598764107966,0.018183983341129833,0.002590799331665039,0.4650765439848897,0.011474245644972096,0.00711674690246582,0.2624027020001449,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': ElasticNet(alpha=1.3268532943775542, copy_X=True, fit_intercept=True,
           l1_ratio=0.7775122724077823, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",19
0.17355197942004372,0.012861738698849394,0.0017130851745605468,0.17796736766018412,0.013442216005245217,0.00671544075012207,0.5888573250003901,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.2397075655624543, copy_X=True, fit_intercept=True,
           l1_ratio=0.6122358953588597, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",20
0.6618923480709298,0.023982025534096455,0.002395772933959961,0.6699844245921568,0.00834350348631554,0.024143552780151366,0.691508139000689,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2444004942689903, copy_X=True, fit_intercept=True,
           l1_ratio=0.21231324233102639, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",21
0.6659768253676871,0.02405904547714167,0.0024485111236572264,0.6743061466146546,0.008310632631387356,0.023066902160644533,0.6912194759997874,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.20660629530989247, copy_X=True, fit_intercept=True,
           l1_ratio=0.2524909473262946, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",22
0.7173883821333054,0.028714203531048324,0.002383852005004883,0.7278915859660063,0.0074753601687336385,0.023238754272460936,0.6920046169998386,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2057014716122074, copy_X=True, fit_intercept=True,
           l1_ratio=0.0017717295938967648, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",23
0.6954452550063056,0.028535116438162714,0.002155160903930664,0.7045753788676218,0.0075703342720806225,0.02345132827758789,0.7092598980007097,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.3771627749742569, copy_X=True, fit_intercept=True,
           l1_ratio=0.005329662630522701, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",24
0.6895827568943611,0.02810549746307643,0.00244293212890625,0.6984231555577913,0.007631265833276738,0.022969865798950197,0.6969888200001151,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.39569176108674925, copy_X=True, fit_intercept=True,
           l1_ratio=0.016572240516351616, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",25
0.6839931420909588,0.028268887076780005,0.0023076534271240234,0.6925554092486259,0.007607041575900203,0.023252439498901368,0.6804312370004482,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.4761490624081836, copy_X=True, fit_intercept=True,
           l1_ratio=0.0050052940785478015, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",26
0.7010568210608138,0.028629999922635443,0.0022478103637695312,0.7104999283658262,0.0075480207017935,0.0230557918548584,0.6797774110000319,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.3311293058200787, copy_X=True, fit_intercept=True,
           l1_ratio=0.005280774055831106, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",27
0.6347799903272582,0.02091494454337601,0.0024532794952392576,0.6413390562655039,0.010945897849527396,0.023548984527587892,0.7040282240004672,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2995302613423712, copy_X=True, fit_intercept=True,
           l1_ratio=0.2496197342915839, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",28
0.4503989961685545,0.006577412527485974,0.002315998077392578,0.4542285774313565,0.008038894162166743,0.024962615966796876,0.6963515509996796,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.508052088156218, copy_X=True, fit_intercept=True,
           l1_ratio=0.9457925603935247, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",29
0.707022350477886,0.027658005977928318,0.0022796154022216796,0.7168100367621264,0.007676752854838166,0.023402690887451172,0.6904874470001232,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2001623120886951, copy_X=True, fit_intercept=True,
           l1_ratio=0.07137649830476922, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",30
0.5613877062880235,0.0153941778975395,0.0024348735809326173,0.566155968833456,0.011290573679298536,0.023480701446533202,0.6870031079997716,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.6760840527945595, copy_X=True, fit_intercept=True,
           l1_ratio=0.21192544038365266, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",31
0.5085215510146501,0.015156071089065968,0.0023308753967285155,0.5131018548404628,0.009407153222031792,0.023705148696899415,0.690190827999686,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.7967985827016804, copy_X=True, fit_intercept=True,
           l1_ratio=0.0639626618621175, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",32
0.5143877723919058,0.017984216083089297,0.002283048629760742,0.5169375802996342,0.006356801448638436,0.02299213409423828,0.931863759999942,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.7508664147739366, copy_X=True, fit_intercept=True,
           l1_ratio=0.29725844812788327, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",33
0.5368362130550374,0.014735124965250751,0.002293968200683594,0.5412250916178982,0.010659936511892057,0.023588037490844725,0.6858346429999074,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.9134594786497857, copy_X=True, fit_intercept=True,
           l1_ratio=0.17532380523614483, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",34
0.5756226656148563,0.02190455780096929,0.002310323715209961,0.5793928293633347,0.009969637744333897,0.024646759033203125,0.950394509999569,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.22632272711731824, copy_X=True, fit_intercept=True,
           l1_ratio=0.6844171522807398, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",35
0.5803179585972125,0.02020254025376945,0.002265787124633789,0.5860918187019413,0.008801280067632035,0.02306227684020996,0.701771244000156,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.090005890457901, copy_X=True, fit_intercept=True,
           l1_ratio=0.0573574768592728, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",36
0.5335183795358862,0.016182862018963,0.002305126190185547,0.5379872808400741,0.009961007915913842,0.023525476455688477,0.5709549949997381,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.48901993621981577, copy_X=True, fit_intercept=True,
           l1_ratio=0.4321564424596315, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",37
0.6277970452087769,0.019525742511570125,0.00224761962890625,0.6336171010063489,0.01216795512266615,0.023865318298339842,0.6944744720003655,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.29537962829759046, copy_X=True, fit_intercept=True,
           l1_ratio=0.28447050261435736, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",38
0.5690638524357267,0.01638283572396705,0.0023343563079833984,0.5739084553649988,0.010999593807329332,0.022995853424072267,0.6779295199994522,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.7354422914637193, copy_X=True, fit_intercept=True,
           l1_ratio=0.1667346753900251, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",39
0.5665539161560746,0.021523415913590253,0.0023643016815185548,0.5703793809340836,0.00929304951139938,0.025395822525024415,0.9248543659996358,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.4662252245973241, copy_X=True, fit_intercept=True,
           l1_ratio=0.3089840495102516, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",40
0.6328885297409295,0.03452234845247094,0.0017610549926757812,0.6373520237127199,0.008545619426384966,0.005866289138793945,0.2233662300004653,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=1.1493398817937446, copy_X=True, fit_intercept=True,
           l1_ratio=0.05927128437367691, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",41
0.10121359369463552,0.016057379946702775,0.0024755001068115234,0.10620623427489415,0.013321084632785071,0.025156831741333006,0.6822492299997975,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.7128930229573436, copy_X=True, fit_intercept=True,
           l1_ratio=0.967500969958939, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",42
0.5456459686589482,0.028222598812374825,0.0017781257629394531,0.5496272831579587,0.008449036384719867,0.006723880767822266,0.6275985500005845,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.6639894118478328, copy_X=True, fit_intercept=True,
           l1_ratio=0.561240104666819, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",43
0.6094575528812128,0.019752717340021105,0.0025241851806640627,0.6152459747571865,0.010506605925852567,0.024362611770629882,0.6902768760000981,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.5626204994117671, copy_X=True, fit_intercept=True,
           l1_ratio=0.13777078410948812, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",44
0.4117877346068924,0.006272648734018928,0.002313852310180664,0.4156012227197647,0.007855440400107277,0.023645782470703126,0.5883103360001769,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.8743022541287557, copy_X=True, fit_intercept=True,
           l1_ratio=0.6998746410611256, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",45
0.5360919324818587,0.024130721643949908,0.002382373809814453,0.5401442111921335,0.009702025820483726,0.005657386779785156,0.3320190369995544,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.7976287360256895, copy_X=True, fit_intercept=True,
           l1_ratio=0.4625266142753023, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",46
0.6393596099591986,0.026024494939716973,0.0025054931640625,0.6444835385455064,0.008042920693027134,0.02418651580810547,0.578831199999513,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.21655945809081523, copy_X=True, fit_intercept=True,
           l1_ratio=0.3412368961732795, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",47
0.5022751754037179,0.02183240342738713,0.001863241195678711,0.5056725420645036,0.007840715955612055,0.007050895690917968,0.5994929809994574,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': ElasticNet(alpha=1.45643797880363, copy_X=True, fit_intercept=True,
           l1_ratio=0.10745910677605301, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",48
0.508797285697715,0.014577854227537374,0.00229644775390625,0.5123934568436251,0.009100768690926474,0.022851181030273438,0.7093356959994708,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.006927819744235, copy_X=True, fit_intercept=True,
           l1_ratio=0.2032624983951069, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",49
0.5379849977756,0.02063336509007817,0.0022771358489990234,0.5420287921254647,0.008578135192661549,0.0237518310546875,0.5907999040000504,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.6790680624751273, copy_X=True, fit_intercept=True,
           l1_ratio=0.04162952936054927, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",50
0.4196538818342802,0.02016215837369001,0.0018420219421386719,0.42409996404245487,0.01456190200253423,0.005096006393432617,0.22118659900024795,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.5812443935309548, copy_X=True, fit_intercept=True,
           l1_ratio=0.8881728364834766, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",51
0.6712702264822169,0.02577814195075279,0.0025993824005126954,0.679464962419852,0.007875435540549638,0.024400997161865234,0.7200227499997709,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.32662208685192273, copy_X=True, fit_intercept=True,
           l1_ratio=0.10398107320815297, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",52
0.5165693639980574,0.01482164276927024,0.002435779571533203,0.5196705329267018,0.008060074729326598,0.023290729522705077,0.7037272539992045,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.44800019734698215, copy_X=True, fit_intercept=True,
           l1_ratio=0.5377118382474861, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",53
0.43491240600881637,0.02274620283342566,0.0015904903411865234,0.4373530460327671,0.009674376090597651,0.004347562789916992,0.23161366899967106,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': ElasticNet(alpha=0.9357329481286012, copy_X=True, fit_intercept=True,
           l1_ratio=0.39506450340419413, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",54
0.6249499416988902,0.024597309879059663,0.0022727012634277343,0.629400258051645,0.011030948614964717,0.024099063873291016,0.5822796020001988,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2664337477425172, copy_X=True, fit_intercept=True,
           l1_ratio=0.34292352758320455, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",55
0.4670259086527275,0.012530648359965457,0.002592039108276367,0.4703755623374971,0.007761517284463531,0.024306535720825195,0.9598792249998951,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.217392678666397, copy_X=True, fit_intercept=True,
           l1_ratio=0.25906800970825494, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",56
0.509667866060979,0.013669888472508721,0.0023056507110595704,0.512793959534979,0.007448641020930959,0.023405933380126955,0.6973672230005832,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.40916172980822274, copy_X=True, fit_intercept=True,
           l1_ratio=0.6403900871891213, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",57
0.6691756539834569,0.03342105244562325,0.0020327091217041014,0.6718959316771805,0.01043874312018386,0.0048811912536621095,0.36734532399987074,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': ElasticNet(alpha=0.3581102622387035, copy_X=True, fit_intercept=True,
           l1_ratio=0.4467280594225573, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",58
0.5718859253051315,0.022673694599818436,0.0024196624755859373,0.5759162906815997,0.007953561788988131,0.0246063232421875,0.5932304749994728,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.640239406708138, copy_X=True, fit_intercept=True,
           l1_ratio=0.17745437794681534, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",59
0.57034772174454,0.016757691833673267,0.002437400817871094,0.5751111047066289,0.010805877351702001,0.02414364814758301,0.6984040030001779,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.8182641660155374, copy_X=True, fit_intercept=True,
           l1_ratio=0.13479288312079973, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",60
0.6669011027852146,0.02675771594516015,0.0023854255676269533,0.674953595910879,0.007839192456356505,0.02398362159729004,0.6801629300007335,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.5165431509690117, copy_X=True, fit_intercept=True,
           l1_ratio=0.033547816997408955, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",61
0.46812952370481026,0.02079344741695309,0.0016864776611328126,0.4727680593430755,0.012124267864986113,0.010399723052978515,0.21316152899998997,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=1.096821398729415, copy_X=True, fit_intercept=True,
           l1_ratio=0.7655726905250068, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",62
0.14017991213184225,0.012951145735330297,0.0017543315887451171,0.14477371566798944,0.012850017694897483,0.007881736755371094,0.963195662000544,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.551440055462089, copy_X=True, fit_intercept=True,
           l1_ratio=0.5034853654586445, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",63
0.6565387929428734,0.025003705975356953,0.0023035526275634764,0.664122968735539,0.008021369955762126,0.02382059097290039,0.6816469470004449,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.4272081470316555, copy_X=True, fit_intercept=True,
           l1_ratio=0.08835120195239293, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",64
0.5360228855692319,0.017822023157083713,0.0022401809692382812,0.5399635368942222,0.009175221000321901,0.023221731185913086,0.5642597559999558,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.7000156118996278, copy_X=True, fit_intercept=True,
           l1_ratio=0.23722260160222866, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",65
0.6760454503709268,0.02651008360907236,0.0023442745208740235,0.6844451897412096,0.007880038062606919,0.023184537887573242,0.6778535579996969,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.34494788529838044, copy_X=True, fit_intercept=True,
           l1_ratio=0.07813584219572955, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",66
0.7176909685722903,0.028705033885185548,0.002253293991088867,0.7282200622510807,0.007474800874610201,0.02372713088989258,0.6851489110003968,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2029399093134577, copy_X=True, fit_intercept=True,
           l1_ratio=0.002071320106278905, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",67
0.7150919735361427,0.028673475867382874,0.0024512290954589845,0.7254564687890108,0.007490361765889189,0.023174571990966796,0.6795704730002399,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.21879888351764726, copy_X=True, fit_intercept=True,
           l1_ratio=0.005993758721362513, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",68
0.6776485709563779,0.025997173581688293,0.0024806976318359373,0.6861485637399387,0.0078229641550888,0.024890995025634764,0.6784543869998743,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2791975394330226, copy_X=True, fit_intercept=True,
           l1_ratio=0.11875437286618495, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",69
0.7163273969740629,0.028679866970992948,0.0022369861602783204,0.7267748512415333,0.007483923198320429,0.02329277992248535,0.6850087619995975,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.21046945973964626, copy_X=True, fit_intercept=True,
           l1_ratio=0.0049078634494405405, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",70
0.5904207049235499,0.017566345183128915,0.002454662322998047,0.5952374900537614,0.011253351001457851,0.024661493301391602,0.690570043999287,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.6122127298214293, copy_X=True, fit_intercept=True,
           l1_ratio=0.16480374425790284, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",71
0.6622688395342384,0.02643595525144106,0.002243518829345703,0.6699541385067962,0.007877547936475054,0.02422027587890625,0.6829317250003442,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.5205408804914538, copy_X=True, fit_intercept=True,
           l1_ratio=0.04153472287823203, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",72
0.7118243343988881,0.02875085817080619,0.0023279190063476562,0.7219272602969861,0.007497392990333432,0.023983287811279296,0.6817224110000097,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.24922306778609904, copy_X=True, fit_intercept=True,
           l1_ratio=0.0025535150543695402, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",73
0.6436664471927823,0.022783167789366284,0.003380584716796875,0.651040350648841,0.00921502799317798,0.029474353790283202,0.6740364600000248,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.3265016049689084, copy_X=True, fit_intercept=True,
           l1_ratio=0.18948390634308523, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",74
0.5822223600123617,0.016497137523776698,0.002393817901611328,0.587179576522108,0.011489872238678164,0.023299360275268556,0.6890038869996715,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.5411930191648696, copy_X=True, fit_intercept=True,
           l1_ratio=0.22892313879346868, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",75
0.5946679220330111,0.016722043265714907,0.0023281097412109373,0.5997557391344126,0.011919308476492614,0.02318730354309082,0.6869374859998061,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.3902811469751183, copy_X=True, fit_intercept=True,
           l1_ratio=0.3134230042646694, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",76
0.5889962000167521,0.016539903894224155,0.002379035949707031,0.594024442311066,0.011762573905855124,0.024274873733520507,0.6861035299998548,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.44771154374761085, copy_X=True, fit_intercept=True,
           l1_ratio=0.2777923001035152, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",77
0.6596384930028437,0.0295910287953596,0.003941154479980469,0.6662282536783428,0.007394368810875372,0.027244997024536134,0.5742296859998532,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2967721709750426, copy_X=True, fit_intercept=True,
           l1_ratio=0.15099224540419195, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",78
0.602950477077124,0.02987598402451817,0.002040529251098633,0.6062916272971455,0.009921412676989205,0.009223747253417968,0.6816196070003571,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2021060806395435, copy_X=True, fit_intercept=True,
           l1_ratio=0.825136948118806, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",79
0.5593558238377289,0.02752395951000441,0.0019201278686523438,0.5619753275757574,0.008481240550753907,0.007308006286621094,0.6074028630000612,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': ElasticNet(alpha=1.293784047694778, copy_X=True, fit_intercept=True,
           l1_ratio=0.030640370431988896, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",80
0.49012098015325184,0.011929938913217876,0.0025814056396484377,0.49355266953868604,0.007465702472982597,0.02608914375305176,0.6899127099995894,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.7523663761674975, copy_X=True, fit_intercept=True,
           l1_ratio=0.3711628907628474, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",81
0.5085726541288473,0.014321864726105618,0.0023546218872070312,0.5117627520599267,0.007257287289607431,0.02406139373779297,0.572860498999944,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.5801191886893505, copy_X=True, fit_intercept=True,
           l1_ratio=0.42524396716535773, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",82
0.5049079842062806,0.014080075095559573,0.0022981643676757814,0.5090817151082997,0.009741744910369346,0.023614025115966795,0.6781829100000323,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.4023924346228833, copy_X=True, fit_intercept=True,
           l1_ratio=0.11993630980624659, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",83
0.7086830344163627,0.03707173077936172,0.0018337726593017577,0.7126455272499691,0.009454040682218062,0.0076332569122314455,0.21409596400008013,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=0.3688411074599128, copy_X=True, fit_intercept=True,
           l1_ratio=0.06093146041639496, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",84
0.49537547604475024,0.016684654819543496,0.002374267578125,0.4981805514094163,0.006536909998148709,0.023820781707763673,0.9253015260001121,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.0627459299437925, copy_X=True, fit_intercept=True,
           l1_ratio=0.2202386826554688, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",85
0.6411194281887418,0.03278884437199971,0.0017633914947509765,0.6466043911308176,0.008175875289239836,0.008089351654052734,0.6868633329995646,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2500998466381871, copy_X=True, fit_intercept=True,
           l1_ratio=0.32235913230071034, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",86
0.4924995075934156,0.013869954399826653,0.002317953109741211,0.49579397548615234,0.007370789100273095,0.02293858528137207,0.687343186000362,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.9261991402281149, copy_X=True, fit_intercept=True,
           l1_ratio=0.2636869145496624, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",87
0.6757593282020865,0.02711224040638732,0.002213144302368164,0.6836410792761068,0.007700288468103454,0.02357821464538574,0.6024084149994451,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.3091723204011232, copy_X=True, fit_intercept=True,
           l1_ratio=0.08704877203618588, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",88
0.5749960916392143,0.025445043652753168,0.0021477699279785155,0.5783295329772418,0.008934265779711495,0.006998300552368164,0.3544816619996709,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': ElasticNet(alpha=0.4910486799792646, copy_X=True, fit_intercept=True,
           l1_ratio=0.7318406828396061, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",89
0.42503954202755334,0.004329250942732294,0.004580068588256836,0.4289533335571479,0.0073942695933182125,0.025138282775878908,0.6882780460000504,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.6457259837560606, copy_X=True, fit_intercept=True,
           l1_ratio=0.8805923999305213, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",90
0.40861505643936546,0.00605222107265364,0.002473115921020508,0.4124534995627914,0.008006129344800366,0.023602008819580078,0.5689051090002977,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.7009056951019087, copy_X=True, fit_intercept=True,
           l1_ratio=0.9963118461598672, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",91
0.6669181123511205,0.026790835060295125,0.0023349761962890626,0.6741088444004457,0.00638556469269921,0.023900651931762697,0.9328833970002961,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2024358277016166, copy_X=True, fit_intercept=True,
           l1_ratio=0.19536963019765405, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",92
0.6758008610092432,0.03532015534997195,0.0016831398010253907,0.6794509174396436,0.010515208671849414,0.0046160221099853516,0.33510175200080994,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.9750002374890809, copy_X=True, fit_intercept=True,
           l1_ratio=0.020618900772996343, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",93
0.5584940173057024,0.01589759303877633,0.0024491310119628905,0.5632623782315122,0.010819916507329242,0.023254585266113282,0.6941360720002194,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.8326534324997055, copy_X=True, fit_intercept=True,
           l1_ratio=0.15609609822114967, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",94
0.5132635597659362,0.013878219970617427,0.0024252414703369142,0.5161884271304765,0.007464136500600595,0.023076629638671874,0.5795445590001691,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.41839865455276015, copy_X=True, fit_intercept=True,
           l1_ratio=0.6150254138882382, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",95
0.6256500448467321,0.02402641458731099,0.0024197578430175783,0.632288789623957,0.00801423216830772,0.026486730575561522,0.6738844620003874,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.7737047944439682, copy_X=True, fit_intercept=True,
           l1_ratio=0.04629736695307201, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",96
0.5699614207564011,0.021278312057508984,0.0023358345031738283,0.573809811961127,0.009792391805945613,0.02353191375732422,0.5755045739997513,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.8722421518398544, copy_X=True, fit_intercept=True,
           l1_ratio=0.12532701177272673, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",97
0.4688979970267022,0.02097358533967596,0.0018039703369140624,0.4727650710568746,0.011792596927844325,0.005822086334228515,0.6106928429999243,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': ElasticNet(alpha=1.6513677915319351, copy_X=True, fit_intercept=True,
           l1_ratio=0.575690723002416, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",98
0.523965767065017,0.025574119511470882,0.0021302223205566405,0.5277711634585508,0.009722284088582632,0.010805892944335937,0.6862804279999182,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.45945966934880056, copy_X=True, fit_intercept=True,
           l1_ratio=0.5049800483864507, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",99
0.6783666146216193,0.028222878439823643,0.0023731708526611326,0.6866644891740714,0.0076026163060512195,0.02415804862976074,0.6912760029999845,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.5396673598710462, copy_X=True, fit_intercept=True,
           l1_ratio=0.0016333419855175035, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",100
0.5356461021195434,0.01987255153555746,0.002300930023193359,0.5394320913736406,0.008099904448691773,0.026880168914794923,0.5840306579993921,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.1747646453451166, copy_X=True, fit_intercept=True,
           l1_ratio=0.10150331307502874, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",101
0.6109224296560856,0.017184662640317035,0.0024463653564453123,0.6160028379817862,0.012402632180488924,0.024456167221069337,0.6755393840003308,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2702431845198321, copy_X=True, fit_intercept=True,
           l1_ratio=0.41652852001756924, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",102
0.6358713002295862,0.027761604140855822,0.0017681598663330078,0.6395694282444236,0.010253103517195676,0.007363319396972656,0.33366500600004656,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.3795887331145281, copy_X=True, fit_intercept=True,
           l1_ratio=0.3671287561116129, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",103
0.47070214134010485,0.010906209224107836,0.002194833755493164,0.4740946574104498,0.007745350844492138,0.023030185699462892,0.5807753130002311,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.6062238560605318, copy_X=True, fit_intercept=True,
           l1_ratio=0.6591528948788646, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",104
0.6484304301416703,0.022562914553666883,0.0022871017456054686,0.6559077165238819,0.009847992342117803,0.023703718185424806,0.7044033270003638,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2362646564184139, copy_X=True, fit_intercept=True,
           l1_ratio=0.28295032328422237, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",105
0.6655483073991942,0.02863495206242119,0.001703643798828125,0.6730714080319381,0.0073621079412248165,0.008221197128295898,0.9288096480004242,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.3390650856046934, copy_X=True, fit_intercept=True,
           l1_ratio=0.07917484054562224, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",106
0.4068565406336743,0.006733268293317171,0.002450370788574219,0.41085946809134155,0.007575271505875088,0.02343325614929199,0.681777325999974,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.7923719679866679, copy_X=True, fit_intercept=True,
           l1_ratio=0.2414450050579108, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",107
0.5477968201365299,0.025601969650242095,0.0019068717956542969,0.5523811391081914,0.009464905248508782,0.007913351058959961,0.33002856700022676,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.6835746196355441, copy_X=True, fit_intercept=True,
           l1_ratio=0.48109542033956976, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",108
0.6708302681439376,0.027736377997895127,0.002238607406616211,0.6794065204352606,0.007150709873965134,0.024210166931152344,0.5813370340001711,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.49043433089310273, copy_X=True, fit_intercept=True,
           l1_ratio=0.02228630346364381, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",109
0.6184168301700929,0.019698226223024116,0.0023087501525878907,0.6242613972800826,0.011163365495888504,0.0238344669342041,0.680215930000486,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.4313835758938187, copy_X=True, fit_intercept=True,
           l1_ratio=0.1860711166286906, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",110
0.6153434604927568,0.0180238075310146,0.002492952346801758,0.6203038324848432,0.01239848660248375,0.023213577270507813,0.7050408899995091,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.3016931051972197, copy_X=True, fit_intercept=True,
           l1_ratio=0.3348355292828442, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",111
0.3550389309796368,0.004823767787314064,0.00238800048828125,0.3591217487960061,0.008153550221037451,0.026959562301635744,0.5646587070004898,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.4943294186488747, copy_X=True, fit_intercept=True,
           l1_ratio=0.527941059227781, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",112
0.7136621333685031,0.03484521745610142,0.0021346569061279296,0.7170328713891984,0.009138606878716295,0.005374813079833984,0.6020375050002258,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': ElasticNet(alpha=0.36011182471546754, copy_X=True, fit_intercept=True,
           l1_ratio=0.06347525632061217, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",113
0.4680698557262851,0.011681725753284319,0.0022239208221435545,0.4715842518206038,0.007500055163907956,0.023144912719726563,0.7037183429993092,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.2976034908758107, copy_X=True, fit_intercept=True,
           l1_ratio=0.20619500086606016, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",114
0.582224440193063,0.017438758312825382,0.00222625732421875,0.5869954430348006,0.01096031768674632,0.023028850555419922,0.7117017179998584,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.7282680324311395, copy_X=True, fit_intercept=True,
           l1_ratio=0.13766641564787108, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",115
0.6367498898776365,0.026053441349459073,0.0023915767669677734,0.641884643441743,0.008004787061658039,0.02615523338317871,0.5862758100001884,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.20087757241342089, copy_X=True, fit_intercept=True,
           l1_ratio=0.39094355875503883, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",116
0.5500310458492731,0.015105969912320457,0.0023413658142089843,0.5541807496418794,0.011623507171457962,0.023101186752319335,0.6977674340005251,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.5762719578110193, copy_X=True, fit_intercept=True,
           l1_ratio=0.30185435204583694, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",117
0.6551666398713385,0.032454270975005924,0.0018065452575683593,0.6579793416649519,0.010743514532886451,0.007608366012573242,0.35587305199987895,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': ElasticNet(alpha=1.7318302211759233, copy_X=True, fit_intercept=True,
           l1_ratio=0.001351749394867879, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",118
0.6628859795068525,0.028647612128320857,0.002513265609741211,0.6694645994447959,0.00808436302456406,0.02363476753234863,0.5944859589999396,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2707607648180272, copy_X=True, fit_intercept=True,
           l1_ratio=0.1664197649374608, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",119
0.6451666195383666,0.0261894441944005,0.0023466110229492187,0.6514336016309887,0.006836575131836177,0.023545122146606444,0.9478632899999866,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.40091902094189735, copy_X=True, fit_intercept=True,
           l1_ratio=0.09955231190420372, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",120
0.056007471793061446,0.021520594282211026,0.0016388416290283204,0.06130240282796555,0.017182541878489836,0.007047319412231445,0.6873449009999604,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.9674192988412965, copy_X=True, fit_intercept=True,
           l1_ratio=0.9474379297424078, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",121
0.5120159286477646,0.014647167483037458,0.002266216278076172,0.5151524408411737,0.007814076288494965,0.023833179473876955,0.6835921390002113,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.5307851427267342, copy_X=True, fit_intercept=True,
           l1_ratio=0.4562510710282859, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",122
0.7171687475446756,0.034552174680266244,0.0018039703369140624,0.7209464713134913,0.009212475462590138,0.007895946502685547,0.21830911300003208,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.23952578588159035, copy_X=True, fit_intercept=True,
           l1_ratio=0.04856689745222597, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",123
0.6996552531237515,0.03446420898431946,0.001852273941040039,0.7030790947214229,0.009189193152312815,0.006361484527587891,0.23241300500012585,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.4726257948646546, copy_X=True, fit_intercept=True,
           l1_ratio=0.04000580003342198, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",124
0.6577559415990801,0.03307564174577671,0.0018491744995117188,0.6614407466631953,0.007599597029342951,0.008124494552612304,0.2232193970003209,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.639795660716002, copy_X=True, fit_intercept=True,
           l1_ratio=0.11718700035324965, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",125
0.6000022801290907,0.034040552290283535,0.001882314682006836,0.6046777562350989,0.005224625422525625,0.006704139709472656,0.22209458999986964,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=1.035837524792288, copy_X=True, fit_intercept=True,
           l1_ratio=0.142087463768704, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",126
0.5460846841482867,0.02847904309255728,0.0017903804779052734,0.5512381483727233,0.007201120383157263,0.007745170593261718,0.2248870330004138,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=1.1338302413825265, copy_X=True, fit_intercept=True,
           l1_ratio=0.2603788307435061, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",127
0.34166492553341155,0.010926899447269392,0.001977396011352539,0.34679349018322964,0.014073627696793147,0.008078718185424804,0.21891316399978678,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=1.5791059584439617, copy_X=True, fit_intercept=True,
           l1_ratio=0.8319388568035507, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",128
0.5301919273471876,0.026250329948336617,0.0018196582794189453,0.5353242706273693,0.008504758531875609,0.007301139831542969,0.2198715730000913,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=1.3921408237373032, copy_X=True, fit_intercept=True,
           l1_ratio=0.2250044322871533, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",129
0.6607487776609747,0.03278488037243915,0.002361011505126953,0.6645243887600996,0.008488055535143398,0.005649757385253906,0.22194844799923885,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.7755707067492127, copy_X=True, fit_intercept=True,
           l1_ratio=0.06906611530487526, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",130
0.6260768941992592,0.03212827462178035,0.002259635925292969,0.6301662528451576,0.00829396994324135,0.0055888652801513675,0.2202774879997378,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=1.2413517910604908, copy_X=True, fit_intercept=True,
           l1_ratio=0.053618429585806204, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",131
0.6041762991400926,0.03764483671337199,0.0018171310424804688,0.6082887974062801,0.004348079343659445,0.007776927947998047,0.21850894699946366,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.3169479715973831, copy_X=True, fit_intercept=True,
           l1_ratio=0.7217643568644252, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",132
0.6110885261703409,0.038258326112980044,0.002217531204223633,0.6149428182077458,0.00470950074017714,0.006716442108154297,0.22015763000035804,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.24267430072688007, copy_X=True, fit_intercept=True,
           l1_ratio=0.9114263053729021, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",133
0.6718835628664139,0.034236314415849185,0.0017758846282958985,0.675259881018704,0.009320570958282504,0.006029081344604492,0.2269135060005283,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=0.893241040104471, copy_X=True, fit_intercept=True,
           l1_ratio=0.022827818427693627, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",134
0.6454017979149291,0.03508434900868602,0.0019661426544189454,0.648954686428319,0.007919121399371098,0.006976032257080078,0.21673841000028915,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.5935986132479185, copy_X=True, fit_intercept=True,
           l1_ratio=0.180892780543755, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",135
0.6193815333208027,0.036174905983638095,0.0017518043518066407,0.6250258410632626,0.007472585293549549,0.0057484149932861325,0.5910504679995938,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=0.42968387728999663, copy_X=True, fit_intercept=True,
           l1_ratio=0.35579900100385436, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",136
0.6185691861431624,0.030029743873925978,0.0015645027160644531,0.6223134509509356,0.008520469229510783,0.004036331176757812,0.23131971700058784,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': ElasticNet(alpha=0.35006199166942586, copy_X=True, fit_intercept=True,
           l1_ratio=0.15640527187162753, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",137
0.6211862527021763,0.03607990671766095,0.0018689632415771484,0.625161671232038,0.004027355089590023,0.0073357105255126955,0.21915689900015423,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.5493799803446276, copy_X=True, fit_intercept=True,
           l1_ratio=0.28964568980858196, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",138
0.6943221003689248,0.035906007674733356,0.0017859935760498047,0.6978163089514478,0.008350886476519092,0.006683206558227539,0.2322247169995535,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=0.2850496853626772, copy_X=True, fit_intercept=True,
           l1_ratio=0.20815898798503596, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",139
0.5673752646623877,0.02755250154975765,0.0016479969024658203,0.5710383468739159,0.008564122073005302,0.004769325256347656,0.5888190069999837,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': ElasticNet(alpha=0.8463293922410347, copy_X=True, fit_intercept=True,
           l1_ratio=0.09972160933689013, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",140
0.5287440225742859,0.023252707056229404,0.0019443511962890625,0.5328567308454079,0.010492749391655967,0.007438850402832031,0.2274790880001092,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.6590134162750259, copy_X=True, fit_intercept=True,
           l1_ratio=0.7722764349263879, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",141
0.7014700725083207,0.034257604517488126,0.001837921142578125,0.7050715510643567,0.009077170982109658,0.008132410049438477,0.24181052400035696,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': ElasticNet(alpha=0.3891460830093084, copy_X=True, fit_intercept=True,
           l1_ratio=0.08264669055548357, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",142
0.7027868335713459,0.03608786569859489,0.0024663925170898436,0.7062182466804556,0.008537247168134926,0.0062290668487548825,0.2228610740003205,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.2206590180344087, copy_X=True, fit_intercept=True,
           l1_ratio=0.23655473260594212, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",143
0.6270209591131761,0.031535273762091816,0.0018681526184082032,0.6297503939056538,0.009512437586990464,0.005160140991210938,0.6113491819996852,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': ElasticNet(alpha=0.4954431805604591, copy_X=True, fit_intercept=True,
           l1_ratio=0.409375727800147, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",144
0.6585525841793606,0.032814659733222416,0.0018043994903564453,0.6618387213730172,0.007152396462509522,0.008005285263061523,0.2250371370000721,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.32817327344969416, copy_X=True, fit_intercept=True,
           l1_ratio=0.3302269421752138, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",145
0.7130859136679545,0.02869682346336457,0.0024555683135986327,0.7233020730515415,0.007497423898425491,0.02365245819091797,0.6790639480004756,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.23521695112740812, copy_X=True, fit_intercept=True,
           l1_ratio=0.005389559811089611, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",146
0.7014683422226715,0.028087687278584524,0.0026503562927246093,0.7109560175621068,0.00761643489099312,0.025371360778808593,0.7021545400002651,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2805731822397072, copy_X=True, fit_intercept=True,
           l1_ratio=0.03135516752115575, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",147
0.6674896367210016,0.026523279435797575,0.0023726940155029295,0.6753902221511641,0.007877396599197391,0.02356715202331543,0.6858625590002703,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.4595132299855451, copy_X=True, fit_intercept=True,
           l1_ratio=0.049777050312930615, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",148
0.6529863276583984,0.024137060141293073,0.00234832763671875,0.6605283029994442,0.008258685923411228,0.0234372615814209,0.6915127379998012,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.373260372692918, copy_X=True, fit_intercept=True,
           l1_ratio=0.1258443543239059, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",149
0.7136863887042646,0.028462889989650752,0.0022689342498779298,0.7239765431202142,0.007514959146561985,0.02410416603088379,0.6867725310003152,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.21604670919249064, copy_X=True, fit_intercept=True,
           l1_ratio=0.017241422694342312, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",150
0.7064602143099663,0.027669847002740416,0.002298450469970703,0.7162119609643702,0.007678152119192634,0.024237823486328126,0.683107519999794,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2049222964557492, copy_X=True, fit_intercept=True,
           l1_ratio=0.06932201130013932, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",151
0.6576657211886172,0.02505847885211157,0.002396106719970703,0.6652898622618693,0.008009428198728382,0.02397775650024414,0.6971422679998796,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.418684704201525, copy_X=True, fit_intercept=True,
           l1_ratio=0.08958386129881095, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",152
0.6769549163465493,0.025613190125800003,0.0034188270568847657,0.6853986491959747,0.0078469397287505,0.028921079635620118,0.6791009739999936,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2575135843742603, copy_X=True, fit_intercept=True,
           l1_ratio=0.14147356537229894, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",153
0.702020291787786,0.028631723077971287,0.0024373531341552734,0.7115210362878737,0.007545234442145761,0.023921871185302736,0.6860321869999098,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.3224730953003332, copy_X=True, fit_intercept=True,
           l1_ratio=0.005698378882020544, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",154
0.6774643476780897,0.026181525366427785,0.0023406505584716796,0.6859683730320478,0.007826631653751762,0.023476219177246092,0.6773272290001842,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2948721045762954, copy_X=True, fit_intercept=True,
           l1_ratio=0.10658036710636032, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",155
0.6336714036404446,0.021744691222789946,0.002346038818359375,0.6404765395256204,0.009927142624884241,0.024640560150146484,0.6834110820000205,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.36223894646592736, copy_X=True, fit_intercept=True,
           l1_ratio=0.19102722815444134, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",156
0.7124541606358344,0.028131463341970635,0.002460670471191406,0.7226669791272939,0.007554082701835243,0.02293400764465332,0.6834365759996217,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.20058133139250867, copy_X=True, fit_intercept=True,
           l1_ratio=0.03924943493886511, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",157
0.6817598458792172,0.02832604316678078,0.002229118347167969,0.6902019921327573,0.007594777704390801,0.023340749740600585,0.6739969179998297,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.5088190006934687, copy_X=True, fit_intercept=True,
           l1_ratio=0.0014714265453305499, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",158
0.5890079976894451,0.01750688074766892,0.002340888977050781,0.5938210951729768,0.01121370313650696,0.024251174926757813,0.6848974570002611,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.6263461044729006, copy_X=True, fit_intercept=True,
           l1_ratio=0.1620965710681896, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",159
0.5940412902622315,0.02224253435750735,0.002438068389892578,0.5982013454194681,0.010485458448256421,0.0248568058013916,0.574869820999993,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.4472583506619806, copy_X=True, fit_intercept=True,
           l1_ratio=0.273595634787395, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",160
0.6601548385747668,0.02791174275808052,0.0022860050201416017,0.6671434319721616,0.00628831307863564,0.02331681251525879,0.9370415370003684,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.4031253326763302, copy_X=True, fit_intercept=True,
           l1_ratio=0.058864509513491044, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",161
0.6035178041465696,0.03076797228413391,0.0017689228057861327,0.6071133999420579,0.009798146851058879,0.009389925003051757,0.6900250600001527,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.2540008624810344, copy_X=True, fit_intercept=True,
           l1_ratio=0.5993065916792927, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",162
0.6587889100487374,0.02591134938169792,0.002418375015258789,0.6654530193496866,0.008540421094705852,0.023551464080810547,0.572217365999677,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.34347832537407663, copy_X=True, fit_intercept=True,
           l1_ratio=0.11702115486447102, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",163
0.3526251998517141,0.0033793701630500817,0.00344996452331543,0.3568655636580452,0.007855395362031958,0.02645716667175293,0.6827060790001269,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.4527118479642298, copy_X=True, fit_intercept=True,
           l1_ratio=0.5554498240446335, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",164
0.7147873776119851,0.028391648376487076,0.0022172451019287108,0.7251624736926885,0.007514992446362684,0.024426746368408202,0.6767026939996867,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.20335038935631944, copy_X=True, fit_intercept=True,
           l1_ratio=0.02169754078323891, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",165
0.6320337268939068,0.025641078648092723,0.002254676818847656,0.6368964696793764,0.00806054633080083,0.024114179611206054,0.5851852340001642,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.29153919134295625, copy_X=True, fit_intercept=True,
           l1_ratio=0.25184179761855735, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",166
0.5345009164766733,0.023998984034666347,0.0019776344299316405,0.5385658673184441,0.009763668710993961,0.006787300109863281,0.35053874499953963,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.6905234317700115, copy_X=True, fit_intercept=True,
           l1_ratio=0.6390736109047733, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",167
0.6362563738832675,0.02709001943158496,0.0025689125061035155,0.6420336212620462,0.008271656626981046,0.026923656463623047,0.5805521160000353,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.5634992659746806, copy_X=True, fit_intercept=True,
           l1_ratio=0.07565124390098686, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",168
0.46167568426696126,0.008512061214250357,0.002382659912109375,0.46514235434208706,0.008227678560690031,0.02286391258239746,0.9259227169995938,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=0.46844459818117534, copy_X=True, fit_intercept=True,
           l1_ratio=0.9982226306356337, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",169
0.6802198340896521,0.03434336239477617,0.0017025470733642578,0.682467052494863,0.010143376245930109,0.006907320022583008,0.3536109610004132,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,True,,"{'estimator': ElasticNet(alpha=0.5204438923305421, copy_X=True, fit_intercept=True,
           l1_ratio=0.21216755734386467, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",170
0.46453448943775977,0.013461276074246353,0.0022482872009277344,0.4681896490862007,0.007172892236716783,0.023630332946777344,0.5716598799999701,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)",CustomOneHotEncoder(ascending=False),False,False,transfo_num,"{'estimator': ElasticNet(alpha=1.6291823870055535, copy_X=True, fit_intercept=True,
           l1_ratio=0.1408459484555441, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",171
0.7207795158741809,0.037847124812182414,0.001775503158569336,0.7246472913443538,0.009551326912893721,0.007219696044921875,0.33403101500061894,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.24315731385884354, copy_X=True, fit_intercept=True,
           l1_ratio=0.04655719481011071, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",172
0.6820278284399188,0.03376671499040209,0.0016811370849609375,0.6854116242259067,0.008932019249268137,0.006653308868408203,0.33770909099985147,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.39470274165037944, copy_X=True, fit_intercept=True,
           l1_ratio=0.17509018511930108, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",173
0.7094110990716418,0.033786083819051196,0.0018053054809570312,0.71324749770093,0.009076863688164268,0.006672286987304687,0.2197481399998651,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.2647595910546243, copy_X=True, fit_intercept=True,
           l1_ratio=0.09382586428317405, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",174
0.7159420779631948,0.03769765801253681,0.001854705810546875,0.7195876022488795,0.009567201550629458,0.0069863319396972655,0.3430219339998075,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.3098079472354861, copy_X=True, fit_intercept=True,
           l1_ratio=0.04592564767061283, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",175
0.6091866988788563,0.03399857316250583,0.0017826557159423828,0.6135187412546382,0.006136903366607184,0.005886077880859375,0.21964977700008603,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.6063411363304259, copy_X=True, fit_intercept=True,
           l1_ratio=0.3084293433901968, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",176
0.6497509927380356,0.03553466891941556,0.001793670654296875,0.6527274423899699,0.009847685203524168,0.007951784133911132,0.5800873380003395,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=1.3472713494794406, copy_X=True, fit_intercept=True,
           l1_ratio=0.0008690565921774321, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",177
0.5133874568454422,0.02282412941935162,0.001983785629272461,0.5176355679999183,0.00997506561896659,0.00784926414489746,0.33285562400033086,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=1.1951651057015298, copy_X=True, fit_intercept=True,
           l1_ratio=0.371972607001636, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",178
0.701627391925796,0.0362565150940046,0.0017440319061279297,0.7056818782244358,0.007270820140835686,0.00620565414428711,0.2202429810004105,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.23997459752788233, copy_X=True, fit_intercept=True,
           l1_ratio=0.12263845200012863, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",179
0.6113205482291224,0.031073402919059,0.0015997886657714844,0.6142236053602363,0.01098944417244877,0.004483556747436524,0.3366444900002534,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.790701378014618, copy_X=True, fit_intercept=True,
           l1_ratio=0.22989082987295506, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",180
0.6760099977928792,0.03384598729394382,0.0019133567810058593,0.6795902164335124,0.007135256446306922,0.006798601150512696,0.21822195700042357,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.3582470525774638, copy_X=True, fit_intercept=True,
           l1_ratio=0.1918267120203802, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",181
0.6303201024042243,0.03030124376473035,0.0019289016723632812,0.6342157991388573,0.008905406045559802,0.006981849670410156,0.3387827919996198,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.7472063829759945, copy_X=True, fit_intercept=True,
           l1_ratio=0.14977947122663213, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",182
0.7011352219567775,0.0366091148869261,0.0017825126647949218,0.704486500265822,0.009448491774174266,0.007653188705444336,0.34026927099966997,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.4353280118924474, copy_X=True, fit_intercept=True,
           l1_ratio=0.06910175581398652, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",183
0.6263570906352978,0.03213995748034802,0.00214385986328125,0.6295242183997016,0.009025895340688999,0.006319522857666016,0.22581249399991066,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='mean',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': ElasticNet(alpha=0.4815181179539503, copy_X=True, fit_intercept=True,
           l1_ratio=0.03250922659832044, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.99, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",184
0.6972386668478101,0.036863180118704326,0.0017681598663330078,0.699821546266168,0.00936048281198537,0.007057046890258789,0.6121569789993373,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=IterativeImputer(add_indicator=False,
                                                                              estimator=None,
                                                                              imputation_order='ascending',
                                                                              initial_strategy='mean',
                                                                              max_iter=10...
                                                                              min_value=0,
                                                                              missing_values=nan,
                                                                              n_nearest_features=None,
                                                                              random_state=42,
                                                                              sample_posterior=True,
                                                                              skip_complete=True,
                                                                              tol=0.001,
                                                                              verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.5766612469073754, copy_X=True, fit_intercept=True,
           l1_ratio=0.0002655415809353276, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.9, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",185
0.558219452927479,0.02803122749829137,0.0016562938690185547,0.5630686643768986,0.007815275963336334,0.007296514511108398,0.2201284319999104,"PandasColumnTransformer(list_name=<__main__.ListCols object at 0x7f761105d0f0>,
                        n_jobs=-1, remainder='drop', sparse_threshold=0.3,
                        transformer_weights=None,
                        transformers=[('num_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='median',
                                                                           verbose=0)),
                                       'num'),
                                      ('categ_imputer',
                                       FitToPandas(list_name=None,
                                                   restrict_cols=None,
                                                   sk_object=SimpleImputer(add_indicator=False,
                                                                           copy=True,
                                                                           fill_value=None,
                                                                           missing_values=nan,
                                                                           strategy='most_frequent',
                                                                           verbose=0)),
                                       'categ')],
                        verbose=False)","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=0.7173708493484394, copy_X=True, fit_intercept=True,
           l1_ratio=0.4456606970345507, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': PCA(copy=True, iterated_power='auto', n_components=0.95, random_state=None,
    svd_solver='auto', tol=0.0, whiten=False)}",186
0.7178114718577393,0.03698979185014357,0.001837015151977539,0.7217313888696992,0.010444835128845859,0.0062487125396728516,0.3281159940006546,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.3315136760211327, copy_X=True, fit_intercept=True,
           l1_ratio=0.11112130617677873, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",187
0.5407691726336852,0.025877525984398735,0.001679229736328125,0.5441842604644187,0.008729864894240373,0.004372119903564453,0.3424118319999252,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",True,False,,"{'estimator': ElasticNet(alpha=1.1224625007428761, copy_X=True, fit_intercept=True,
           l1_ratio=0.10241988100292745, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",188
0.7125651160489994,0.036715329221864025,0.001611614227294922,0.7165400258704697,0.01053049499340788,0.0046539783477783205,0.3389438340000197,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,False,,"{'estimator': ElasticNet(alpha=0.3233855710631791, copy_X=True, fit_intercept=True,
           l1_ratio=0.16952258741819637, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",189
0.7233360685103728,0.03730951560983966,0.0018857955932617188,0.7270237042229273,0.010315855686630506,0.004741239547729492,0.335119250000389,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=0.20044478925961468, copy_X=True, fit_intercept=True,
           l1_ratio=0.24724238239235108, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",190
0.5413766732368557,0.027682615337145212,0.0014376163482666016,0.5441006473834891,0.011392929335444975,0.004223155975341797,0.32956243799981166,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=1.0376490954366218, copy_X=True, fit_intercept=True,
           l1_ratio=0.26409195150004, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",191
0.5680598499210475,0.029202211225150248,0.001990795135498047,0.5708221503657039,0.010937986563470609,0.006394338607788086,0.33385095599987835,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=0.9614122918430252, copy_X=True, fit_intercept=True,
           l1_ratio=0.2393704377818392, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",192
0.5788987639206883,0.029712641966466127,0.0022023200988769533,0.5816768403014383,0.011070767959480648,0.0044498443603515625,0.3294741849995262,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=0.6697113613558103, copy_X=True, fit_intercept=True,
           l1_ratio=0.38805068692294514, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",193
0.6293236104024986,0.03193700340654458,0.0019822120666503906,0.6320774241257544,0.010970677672619111,0.004964637756347656,0.33484894299999723,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=0.5450596352672293, copy_X=True, fit_intercept=True,
           l1_ratio=0.3491587698920816, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",194
0.6471091885077724,0.032698792637582234,0.0016429901123046875,0.6500192632666021,0.010851940948763083,0.0041371345520019535,0.3328170670001782,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=0.3895606264595909, copy_X=True, fit_intercept=True,
           l1_ratio=0.4784516617314917, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",195
0.26269486872362485,0.013933443481281086,0.0018909931182861327,0.2673005879240177,0.015978150462107293,0.0049612998962402345,0.3307225769995057,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=1.2536016949900064, copy_X=True, fit_intercept=True,
           l1_ratio=0.5134730560090351, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",196
0.7052060177050594,0.036007141418633065,0.0024006843566894533,0.7082922755458798,0.010562313440021774,0.005443572998046875,0.3299098640000011,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=0.2752661335400175, copy_X=True, fit_intercept=True,
           l1_ratio=0.3104595876193416, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",197
0.5178697226523822,0.026253174666414327,0.0016668319702148437,0.5211050889590316,0.012153746343198235,0.0042438507080078125,0.3348292889995719,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=0.8204258174527197, copy_X=True, fit_intercept=True,
           l1_ratio=0.42732165517951304, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",198
0.6771581038715866,0.03479161360056458,0.0016270160675048828,0.679530312233422,0.010366667119661447,0.004490852355957031,0.33729034699990734,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=0.428765083066342, copy_X=True, fit_intercept=True,
           l1_ratio=0.2815182066681785, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",199
0.724175278191467,0.03741824256766762,0.0017364501953125,0.7278536473689743,0.010301981941109064,0.005139780044555664,0.33724670999981754,"AllImputation(categ_cols=['BuildingType', 'PrimaryPropertyType',
                          'LargestPropertyUseType',
                          'SecondLargestPropertyUseType',
                          'ThirdLargestPropertyUseType'],
              missforest=False,
              sk_object=KNNImputer(add_indicator=False, copy=True,
                                   metric='nan_euclidean', missing_values=nan,
                                   n_neighbors=5, weights='uniform'))","LeaveOneOutEncoder(cols=['BuildingType', 'PrimaryPropertyType',
                         'LargestPropertyUseType',
                         'SecondLargestPropertyUseType',
                         'ThirdLargestPropertyUseType'],
                   drop_invariant=False, handle_missing='value',
                   handle_unknown='value', random_state=42, return_df=True,
                   sigma=0.5, verbose=0)",False,True,,"{'estimator': ElasticNet(alpha=0.207268851630116, copy_X=True, fit_intercept=True,
           l1_ratio=0.2188615858644753, max_iter=1000, normalize=False,
           positive=False, precompute=False, random_state=42,
           selection='cyclic', tol=0.0001, warm_start=False), 'pca': None}",200
